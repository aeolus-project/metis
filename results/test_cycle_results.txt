
We generate the FULL G-GRAPH: 

Generation nr.0: <R,s0>; <K,q0>
Generation nr.1: <K,q0>_1; <R,s0>_1; <R,s1>
Generation nr.2: <R,s1>_1; <R,s0>_2; <K,q0>_2; <R,s2>
Generation nr.3: <R,s2>_1; <K,q0>_3; <R,s0>_3; <R,s1>_2; <K,q1>

BOTTOM-UP VISIT of the G-graph. For every node we choose origin node and providers.

LINEARIZATION phase

The linearized paths are the following:

<R,s0> <R,s1> 

<R,s0> <R,s1> <R,s2> 

<K,q0> <K,q1> 


The INSTANCE LINES are the following:

Instance k :
k (C,q0) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<K,q0>--> k (q0,q1)

k (q0,q1) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<K,q1>--> k (q1,D)

k (q1,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Instance r :
r (C,s0) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<R,s0>--> r (s0,s1)

r (s0,s1) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<R,s1>--> r (s1,s2)

r (s1,s2) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<R,s2>--> r (s2,D)

r (s2,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Next we ADD GO (blue) and RETURN (red) EDGES. 


Now the INSTANCE LINES WITH EDGES look like this:

Instance k :
k (C,q0) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<K,q0>--> k (q0,q1)

k (q0,q1) nr.IN-edges =  3
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<K,q1>--> k (q1,D)

k (q1,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: ---p1---> r (s1,s2); ---p2---> r (s2,D)
 INST EDGE: { }

Instance r :
r (C,s0) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<R,s0>--> r (s0,s1)

r (s0,s1) nr.IN-edges =  1
 GO EDGES: ---p1---> k (q0,q1)
 RETURN EDGES: 
 INST EDGE: --<R,s1>--> r (s1,s2)

r (s1,s2) nr.IN-edges =  2
 GO EDGES: ---p2---> k (q0,q1)
 RETURN EDGES: 
 INST EDGE: --<R,s2>--> r (s2,D)

r (s2,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }


********************** ORIGINAL CYCLES FOUND:
r (C,s0)
 r (s0,s1)
 k (C,q0)
 r (s1,s2)  |  k (q1,D)  |  k (q0,q1)
 r (s2,D)


********************** TRUE CYCLES KEPT:
r (s1,s2)  |  k (q1,D)  |  k (q0,q1)

Vertex chosen for splitting: r (s1,s2)

The instance line to be split must be:
Instance r : r (C,s0)  |  r (s0,s1)  |  r (s1,s2)  |  r (s2,D)

Copy instance line:
Instance r' : r' (C,s0)  |  r' (s0,s1)  |  r' (s1,D)

Instance lines updated to: 
Instance r' : r' (C,s0)  |  r' (s0,s1)  |  r' (s1,D)

Instance k : k (C,q0)  |  k (q0,q1)  |  k (q1,D)

Instance r : r (C,s0)  |  r (s0,s1)  |  r (s1,s2)  |  r (s2,D)

REDIRECTION OF GO/BLUE and RETURN/RED edges.
RETURN/RED edge redirected towards: ---p1---> r' (s1,D)
New GO/BLUE edge: r' (s0,s1) ---p1---> k (q0,q1)
Old GO/BLUE edge that has been removed: r (s0,s1) ---p1---> k (q0,q1)


********************** ORIGINAL CYCLES FOUND:
r (C,s0)
 r (s0,s1)
 r (s1,s2)
 k (C,q0)
 r' (C,s0)
 r' (s0,s1)
 k (q0,q1)
 k (q1,D)
 r (s2,D)
 r' (s1,D)


********************** TRUE CYCLES KEPT:



The INSTANCE LINES after splitting are the following:

Instance r' :
r' (C,s0) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<R,s0>--> r' (s0,s1)

r' (s0,s1) nr.IN-edges =  1
 GO EDGES: ---p1---> k (q0,q1)
 RETURN EDGES: 
 INST EDGE: --<R,s1>--> r' (s1,D)

r' (s1,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Instance k :
k (C,q0) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<K,q0>--> k (q0,q1)

k (q0,q1) nr.IN-edges =  3
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<K,q1>--> k (q1,D)

k (q1,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: ---p1---> r' (s1,D); ---p2---> r (s2,D)
 INST EDGE: { }

Instance r :
r (C,s0) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<R,s0>--> r (s0,s1)

r (s0,s1) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<R,s1>--> r (s1,s2)

r (s1,s2) nr.IN-edges =  1
 GO EDGES: ---p2---> k (q0,q1)
 RETURN EDGES: 
 INST EDGE: --<R,s2>--> r (s2,D)

r (s2,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Now we perform a TOPOLOGICAL SORT.

And finally the COMPUTED PLAN is:

r' must perform actions: [Create instance]
k must perform actions: [Create instance]
r must perform actions: [Create instance]
r' must perform actions: [Bind port p1 to instance k]  [Change state from s0 to s1]
r must perform actions: [Change state from s0 to s1]
r must perform actions: [Bind port p2 to instance k]  [Change state from s1 to s2]
k must perform actions: [Change state from q0 to q1]
k must perform actions: [Stop]
r' must perform actions: [Stop]
r must perform actions: [Stop]
