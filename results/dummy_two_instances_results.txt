
We generate the FULL G-GRAPH: 

Generation nr.0: <C2,s0>; <C1,s0>; <C0,s0>
Generation nr.1: <C0,s0>_1; <C1,s0>_1; <C2,s0>_1; <C2,s1>
Generation nr.2: <C2,s1>_1; <C2,s0>_2; <C1,s0>_2; <C0,s0>_2; <C1,s1>; <C2,s2>
Generation nr.3: <C2,s2>_1; <C1,s1>_1; <C0,s0>_3; <C1,s0>_3; <C2,s0>_3; <C2,s1>_2; <C0,s1>
Generation nr.4: <C0,s1>_1; <C2,s1>_3; <C2,s0>_4; <C1,s0>_4; <C0,s0>_4; <C1,s1>_2; <C2,s2>_2; <C1,s2>

BOTTOM-UP VISIT of the G-graph. For every node we choose origin node and providers.
Total requires: p0_2
fanIn[<C2,s2>_1] := 0
fanIn[<C1,s1>_1] := 0
fanIn[<C0,s0>_3] := 0
fanIn[<C1,s0>_3] := 0
fanIn[<C2,s0>_3] := 0
fanIn[<C2,s1>_2] := 0
fanIn[<C0,s1>] := 1
Nodes with fanIn values:
<C2,s2>_1, fanIn = 0 | <C1,s1>_1, fanIn = 0 | <C0,s0>_3, fanIn = 0 | <C1,s0>_3, fanIn = 0 | <C2,s0>_3, fanIn = 0 | <C2,s1>_2, fanIn = 0 | <C0,s1>, fanIn = 1

 ----------------- BOTTOM-UP VISIT LEVEL nr. 4 CYCLE execution nr. 1 ----------------
node to be examined: <C1,s2>
<C1,s2> is NOT an initial node => need to look for parent
<C1,s1>_1 chosen with max fanIn value
origin node chosen: <C1,s1>_1
<C1,s2> is NOT a copy => must take care of providers
<C0,s1> chosen with max fanIn value
Update fanIn : fanIn[<C0,s1>] <- 0 (due to provide p0_2)
list of chosen providers: <C0,s1> 
current generation: Generation nr.4: <C1,s2>
next working set, at level nr.3 : { <C0,s1> <C1,s1>_1  }
Nodes with fanIn values:
<C2,s2>_1, fanIn = 0 | <C1,s1>_1, fanIn = 0 | <C0,s0>_3, fanIn = 0 | <C1,s0>_3, fanIn = 0 | <C2,s0>_3, fanIn = 0 | <C2,s1>_2, fanIn = 0 | <C0,s1>, fanIn = 0
Total requires: p1_1 | p2_1
fanIn[<C2,s1>_1] := 1
fanIn[<C2,s0>_2] := 0
fanIn[<C1,s0>_2] := 0
fanIn[<C0,s0>_2] := 0
fanIn[<C1,s1>] := 1
fanIn[<C2,s2>] := 0
Nodes with fanIn values:
<C2,s1>_1, fanIn = 1 | <C2,s0>_2, fanIn = 0 | <C1,s0>_2, fanIn = 0 | <C0,s0>_2, fanIn = 0 | <C1,s1>, fanIn = 1 | <C2,s2>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 3 CYCLE execution nr. 1 ----------------
node to be examined: <C0,s1>
<C0,s1> is NOT an initial node => need to look for parent
<C0,s0>_2 chosen with max fanIn value
origin node chosen: <C0,s0>_2
<C0,s1> is NOT a copy => must take care of providers
<C1,s1> chosen with max fanIn value
Update fanIn : fanIn[<C1,s1>] <- 0 (due to provide p1_1)
list of chosen providers: <C1,s1> 
current generation: Generation nr.3: <C0,s1>
next working set, at level nr.2 : { <C1,s1> <C0,s0>_2  }
Nodes with fanIn values:
<C2,s1>_1, fanIn = 1 | <C2,s0>_2, fanIn = 0 | <C1,s0>_2, fanIn = 0 | <C0,s0>_2, fanIn = 0 | <C1,s1>, fanIn = 0 | <C2,s2>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 3 CYCLE execution nr. 2 ----------------
node to be examined: <C1,s1>_1
<C1,s1>_1 is NOT an initial node => need to look for parent
<C1,s1> chosen as a copy
origin node chosen: <C1,s1>
current generation: Generation nr.3: <C1,s1>_1; <C0,s1>
next working set, at level nr.2 : { <C1,s1> <C0,s0>_2  }
Nodes with fanIn values:
<C2,s1>_1, fanIn = 1 | <C2,s0>_2, fanIn = 0 | <C1,s0>_2, fanIn = 0 | <C0,s0>_2, fanIn = 0 | <C1,s1>, fanIn = 0 | <C2,s2>, fanIn = 0
Total requires: p2_1
fanIn[<C0,s0>_1] := 0
fanIn[<C1,s0>_1] := 0
fanIn[<C2,s0>_1] := 0
fanIn[<C2,s1>] := 1
Nodes with fanIn values:
<C0,s0>_1, fanIn = 0 | <C1,s0>_1, fanIn = 0 | <C2,s0>_1, fanIn = 0 | <C2,s1>, fanIn = 1

 ----------------- BOTTOM-UP VISIT LEVEL nr. 2 CYCLE execution nr. 1 ----------------
node to be examined: <C1,s1>
<C1,s1> is NOT an initial node => need to look for parent
<C1,s0>_1 chosen with max fanIn value
origin node chosen: <C1,s0>_1
<C1,s1> is NOT a copy => must take care of providers
<C2,s1> chosen with max fanIn value
Update fanIn : fanIn[<C2,s1>] <- 0 (due to provide p2_1)
list of chosen providers: <C2,s1> 
current generation: Generation nr.2: <C1,s1>
next working set, at level nr.1 : { <C2,s1> <C1,s0>_1  }
Nodes with fanIn values:
<C0,s0>_1, fanIn = 0 | <C1,s0>_1, fanIn = 0 | <C2,s0>_1, fanIn = 0 | <C2,s1>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 2 CYCLE execution nr. 2 ----------------
node to be examined: <C0,s0>_2
<C0,s0>_2 is an initial node => no need to look for parent and providers
current generation: Generation nr.2: <C0,s0>_2; <C1,s1>
next working set, at level nr.1 : { <C0,s0> <C2,s1> <C1,s0>_1  }
Nodes with fanIn values:
<C0,s0>_1, fanIn = 0 | <C1,s0>_1, fanIn = 0 | <C2,s0>_1, fanIn = 0 | <C2,s1>, fanIn = 0
Total requires: 
fanIn[<C2,s0>] := 0
fanIn[<C1,s0>] := 0
fanIn[<C0,s0>] := 0
Nodes with fanIn values:
<C2,s0>, fanIn = 0 | <C1,s0>, fanIn = 0 | <C0,s0>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 1 CYCLE execution nr. 1 ----------------
node to be examined: <C0,s0>
<C0,s0> is an initial node => no need to look for parent and providers
current generation: Generation nr.1: <C0,s0>
next working set, at level nr.0 : { <C0,s0>  }
Nodes with fanIn values:
<C2,s0>, fanIn = 0 | <C1,s0>, fanIn = 0 | <C0,s0>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 1 CYCLE execution nr. 2 ----------------
node to be examined: <C2,s1>
<C2,s1> is NOT an initial node => need to look for parent
<C2,s0> chosen with max fanIn value
origin node chosen: <C2,s0>
<C2,s1> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.1: <C2,s1>; <C0,s0>
next working set, at level nr.0 : { <C2,s0> <C0,s0>  }
Nodes with fanIn values:
<C2,s0>, fanIn = 0 | <C1,s0>, fanIn = 0 | <C0,s0>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 1 CYCLE execution nr. 3 ----------------
node to be examined: <C1,s0>_1
<C1,s0>_1 is an initial node => no need to look for parent and providers
current generation: Generation nr.1: <C1,s0>_1; <C2,s1>; <C0,s0>
next working set, at level nr.0 : { <C1,s0> <C2,s0> <C0,s0>  }
Nodes with fanIn values:
<C2,s0>, fanIn = 0 | <C1,s0>, fanIn = 0 | <C0,s0>, fanIn = 0

LINEARIZATION phase

The linearized paths are the following:

<C2,s0> <C2,s1> 

<C0,s0> <C0,s1> 

<C1,s0> <C1,s1> <C1,s2> 


The INSTANCE LINES are the following:

Instance c1 :
c1 (C,s0) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<C1,s0>--> c1 (s0,s1)

c1 (s0,s1) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<C1,s1>--> c1 (s1,s2)

c1 (s1,s2) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<C1,s2>--> c1 (s2,D)

c1 (s2,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Instance c0 :
c0 (C,s0) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<C0,s0>--> c0 (s0,s1)

c0 (s0,s1) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<C0,s1>--> c0 (s1,D)

c0 (s1,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Instance c2 :
c2 (C,s0) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<C2,s0>--> c2 (s0,s1)

c2 (s0,s1) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<C2,s1>--> c2 (s1,D)

c2 (s1,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Next we ADD GO (blue) and RETURN (red) EDGES.

Instance c1 :
c1 (C,s0) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<C1,s0>--> c1 (s0,s1)

c1 (s0,s1) nr.IN-edges =  2
 GO EDGES: ---p1_1---> c0 (s0,s1)
 RETURN EDGES: 
 INST EDGE: --<C1,s1>--> c1 (s1,s2)

c1 (s1,s2) nr.IN-edges =  3
 GO EDGES: 
 RETURN EDGES: ---p2_1---> c2 (s1,D)
 INST EDGE: --<C1,s2>--> c1 (s2,D)

c1 (s2,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: ---p0_2---> c0 (s1,D)
 INST EDGE: { }

Instance c0 :
c0 (C,s0) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<C0,s0>--> c0 (s0,s1)

c0 (s0,s1) nr.IN-edges =  2
 GO EDGES: ---p0_2---> c1 (s1,s2)
 RETURN EDGES: 
 INST EDGE: --<C0,s1>--> c0 (s1,D)

c0 (s1,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: ---p1_1---> c1 (s1,s2)
 INST EDGE: { }

Instance c2 :
c2 (C,s0) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<C2,s0>--> c2 (s0,s1)

c2 (s0,s1) nr.IN-edges =  1
 GO EDGES: ---p2_1---> c1 (s0,s1)
 RETURN EDGES: 
 INST EDGE: --<C2,s1>--> c2 (s1,D)

c2 (s1,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Next we FIX ENCLOSING GO (blue) and RETURN (red) EDGES.
################# Fix enclosing edges for vertex c1 (s0,s1) and GO edge ---p1_1---> c0 (s0,s1)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

################# Fix enclosing edges for vertex c0 (s0,s1) and GO edge ---p0_2---> c1 (s1,s2)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

################# Fix enclosing edges for vertex c2 (s0,s1) and GO edge ---p2_1---> c1 (s0,s1)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

Now the INSTANCE LINES WITH EDGES look like this:

Instance c1 :
c1 (C,s0) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<C1,s0>--> c1 (s0,s1)

c1 (s0,s1) nr.IN-edges =  2
 GO EDGES: ---p1_1---> c0 (s0,s1)
 RETURN EDGES: 
 INST EDGE: --<C1,s1>--> c1 (s1,s2)

c1 (s1,s2) nr.IN-edges =  3
 GO EDGES: 
 RETURN EDGES: ---p2_1---> c2 (s1,D)
 INST EDGE: --<C1,s2>--> c1 (s2,D)

c1 (s2,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: ---p0_2---> c0 (s1,D)
 INST EDGE: { }

Instance c0 :
c0 (C,s0) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<C0,s0>--> c0 (s0,s1)

c0 (s0,s1) nr.IN-edges =  2
 GO EDGES: ---p0_2---> c1 (s1,s2)
 RETURN EDGES: 
 INST EDGE: --<C0,s1>--> c0 (s1,D)

c0 (s1,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: ---p1_1---> c1 (s1,s2)
 INST EDGE: { }

Instance c2 :
c2 (C,s0) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<C2,s0>--> c2 (s0,s1)

c2 (s0,s1) nr.IN-edges =  1
 GO EDGES: ---p2_1---> c1 (s0,s1)
 RETURN EDGES: 
 INST EDGE: --<C2,s1>--> c2 (s1,D)

c2 (s1,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }


----------------------- PLAN SYNTHESIS START -----------------------
Added action [Create instance c1:C1] to the plan.
Added action [Create instance c0:C0] to the plan.
Added action [Create instance c2:C2] to the plan.
External loop iteration i = 0

*********************** Internal loop iteration j = 0
Plan BEFORE: 
 Plan[1] = [Create instance c1:C1]
 Plan[2] = [Create instance c0:C0]
 Plan[3] = [Create instance c2:C2]
Vertex popped: c2 (C,s0)
STACK = 
c0 (C,s0) | c1 (C,s0) | 
Deal with successor vertex.
INST Edge: PUSH vertex: c2 (s0,s1)
STACK = 
c2 (s0,s1) | c0 (C,s0) | c1 (C,s0) | 
Vertex removed: c2 (C,s0)

*********************** Internal loop iteration j = 1
Plan BEFORE: 
 Plan[1] = [Create instance c1:C1]
 Plan[2] = [Create instance c0:C0]
 Plan[3] = [Create instance c2:C2]
Vertex popped: c2 (s0,s1)
STACK = 
c0 (C,s0) | c1 (C,s0) | 
It's an intermediate vertex => add action [c2 : change state from s0 to s1] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
Vertex removed: c2 (s0,s1)

*********************** Internal loop iteration j = 2
Plan BEFORE: 
 Plan[1] = [Create instance c1:C1]
 Plan[2] = [Create instance c0:C0]
 Plan[3] = [Create instance c2:C2]
 Plan[4] = [c2 : change state from s0 to s1]
<<<<<<< HEAD
 Plan[5] = [c2 : bind port p2_1 to instance c1]
=======
>>>>>>> mandrivaUseCase
Vertex popped: c0 (C,s0)
STACK = 
c1 (C,s0) | 
Deal with successor vertex.
Vertex removed: c0 (C,s0)

*********************** Internal loop iteration j = 3
Plan BEFORE: 
 Plan[1] = [Create instance c1:C1]
 Plan[2] = [Create instance c0:C0]
 Plan[3] = [Create instance c2:C2]
 Plan[4] = [c2 : change state from s0 to s1]
<<<<<<< HEAD
 Plan[5] = [c2 : bind port p2_1 to instance c1]
=======
>>>>>>> mandrivaUseCase
Vertex popped: c1 (C,s0)
STACK = 
[]
Deal with successor vertex.
INST Edge: PUSH vertex: c1 (s0,s1)
STACK = 
c1 (s0,s1) | 
Vertex removed: c1 (C,s0)

*********************** Internal loop iteration j = 4
Plan BEFORE: 
 Plan[1] = [Create instance c1:C1]
 Plan[2] = [Create instance c0:C0]
 Plan[3] = [Create instance c2:C2]
 Plan[4] = [c2 : change state from s0 to s1]
<<<<<<< HEAD
 Plan[5] = [c2 : bind port p2_1 to instance c1]
=======
>>>>>>> mandrivaUseCase
Vertex popped: c1 (s0,s1)
STACK = 
[]
It's an intermediate vertex => add action [c1 : change state from s0 to s1] to the plan.
Deal with go/blue edges
GO Edge: PUSH vertex: c0 (s0,s1)
STACK = 
c0 (s0,s1) | 
Deal with return/red edges
Deal with successor vertex.
Vertex removed: c1 (s0,s1)

*********************** Internal loop iteration j = 5
Plan BEFORE: 
 Plan[1] = [Create instance c1:C1]
 Plan[2] = [Create instance c0:C0]
 Plan[3] = [Create instance c2:C2]
 Plan[4] = [c2 : change state from s0 to s1]
<<<<<<< HEAD
 Plan[5] = [c2 : bind port p2_1 to instance c1]
 Plan[6] = [c1 : change state from s0 to s1]
 Plan[7] = [c1 : bind port p1_1 to instance c0]
=======
 Plan[5] = [c1 : invoke method p2_1 of c2]
 Plan[6] = [c1 : change state from s0 to s1]
>>>>>>> mandrivaUseCase
Vertex popped: c0 (s0,s1)
STACK = 
[]
It's an intermediate vertex => add action [c0 : change state from s0 to s1] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
Vertex removed: c0 (s0,s1)

 ************************* NEED INSTANCE DUPLICATION *************************** 
The list of candidates is the following one: c1 (s1,s2)
Chosen vertex for splitting = c1 (s1,s2)
Built the following new vertex = c1' (s1,D)
Pushed duplicated vertex: c1 (s1,s2)
STACK = 
c1 (s1,s2) | 
External loop iteration i = 1

*********************** Internal loop iteration j = 0
Plan BEFORE: 
 Plan[1] = [Create instance c1':C1]
 Plan[2] = [Create instance c1:C1]
 Plan[3] = [Create instance c0:C0]
 Plan[4] = [Create instance c2:C2]
 Plan[5] = [c2 : change state from s0 to s1]
<<<<<<< HEAD
 Plan[6] = [c2 : bind port p2_1 to instance c1']
 Plan[7] = [c2 : bind port p2_1 to instance c1]
 Plan[8] = [c1' : change state from s0 to s1]
 Plan[9] = [c1 : change state from s0 to s1]
 Plan[10] = [c1' : bind port p1_1 to instance c0]
 Plan[11] = [c0 : change state from s0 to s1]
 Plan[12] = [c0 : bind port p0_2 to instance c1']
 Plan[13] = [c0 : bind port p0_2 to instance c1]
=======
 Plan[6] = [c1' : invoke method p2_1 of c2]
 Plan[7] = [c1 : invoke method p2_1 of c2]
 Plan[8] = [c1' : change state from s0 to s1]
 Plan[9] = [c1 : change state from s0 to s1]
 Plan[10] = [c0 : invoke method p1_1 of c1']
 Plan[11] = [c0 : change state from s0 to s1]
>>>>>>> mandrivaUseCase
Vertex popped: c1 (s1,s2)
STACK = 
[]
It's an intermediate vertex => add action [c1 : change state from s1 to s2] to the plan.
Deal with go/blue edges
Deal with return/red edges
RETURN Edge: PUSH vertex: c2 (s1,D)
STACK = 
c2 (s1,D) | 
Deal with successor vertex.
INST Edge: PUSH vertex: c1 (s2,D)
STACK = 
c1 (s2,D) | c2 (s1,D) | 
Target has been REACHED.
Vertex removed: c1 (s1,s2)

The computed PLAN is: 
 Plan[1] = [Create instance c1':C1]
 Plan[2] = [Create instance c1:C1]
 Plan[3] = [Create instance c0:C0]
 Plan[4] = [Create instance c2:C2]
 Plan[5] = [c2 : change state from s0 to s1]
<<<<<<< HEAD
 Plan[6] = [c2 : bind port p2_1 to instance c1']
 Plan[7] = [c2 : bind port p2_1 to instance c1]
 Plan[8] = [c1' : change state from s0 to s1]
 Plan[9] = [c1 : change state from s0 to s1]
 Plan[10] = [c1' : bind port p1_1 to instance c0]
 Plan[11] = [c0 : change state from s0 to s1]
 Plan[12] = [c0 : bind port p0_2 to instance c1']
 Plan[13] = [c0 : bind port p0_2 to instance c1]
 Plan[14] = [c1 : change state from s1 to s2]
 Plan[15] = [c1 : unbind port p2_1 from instance c2]
=======
 Plan[6] = [c1' : invoke method p2_1 of c2]
 Plan[7] = [c1 : invoke method p2_1 of c2]
 Plan[8] = [c1' : change state from s0 to s1]
 Plan[9] = [c1 : change state from s0 to s1]
 Plan[10] = [c0 : invoke method p1_1 of c1']
 Plan[11] = [c0 : change state from s0 to s1]
 Plan[12] = [c1 : invoke method p0_2 of c0]
 Plan[13] = [c1 : change state from s1 to s2]
>>>>>>> mandrivaUseCase
