
We generate the FULL G-GRAPH: 

Generation nr.0: <open-ldap,uninst>; <krb5,uninst>
Generation nr.1: <krb5,uninst>_1; <open-ldap,uninst>_1; <krb5,stage1>
Generation nr.2: <krb5,stage1>_1; <open-ldap,uninst>_2; <krb5,uninst>_2; <open-ldap,normal>
Generation nr.3: <open-ldap,normal>_1; <krb5,uninst>_3; <open-ldap,uninst>_3; <krb5,stage1>_2; <krb5,normal>

BOTTOM-UP VISIT of the G-graph. For every node we choose origin node and providers.

LINEARIZATION phase

The linearized paths are the following:

<open-ldap,uninst> <open-ldap,normal> 

<open-ldap,uninst> 

<krb5,uninst> <krb5,stage1> <krb5,normal> 


The INSTANCE LINES are the following:

Instance krb5 :
krb5 (C,uninst) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<krb5,uninst>--> krb5 (uninst,stage1)

krb5 (uninst,stage1) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<krb5,stage1>--> krb5 (stage1,normal)

krb5 (stage1,normal) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<krb5,normal>--> krb5 (normal,D)

krb5 (normal,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Instance open-ldap :
open-ldap (C,uninst) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<open-ldap,uninst>--> open-ldap (uninst,normal)

open-ldap (uninst,normal) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<open-ldap,normal>--> open-ldap (normal,D)

open-ldap (normal,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Next we ADD GO (blue) and RETURN (red) EDGES. 


Now the INSTANCE LINES WITH EDGES look like this:

Instance krb5 :
krb5 (C,uninst) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<krb5,uninst>--> krb5 (uninst,stage1)

krb5 (uninst,stage1) nr.IN-edges =  1
 GO EDGES: ---libkrb5-dev---> open-ldap (uninst,normal)
 RETURN EDGES: 
 INST EDGE: --<krb5,stage1>--> krb5 (stage1,normal)

krb5 (stage1,normal) nr.IN-edges =  3
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<krb5,normal>--> krb5 (normal,D)

krb5 (normal,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: ---libldap2-dev---> open-ldap (normal,D); ---ldap-uninst-p---> open-ldap (uninst,normal)
 INST EDGE: { }

Instance open-ldap :
open-ldap (C,uninst) nr.IN-edges =  0
 GO EDGES: ---ldap-uninst-p---> krb5 (stage1,normal)
 RETURN EDGES: 
 INST EDGE: --<open-ldap,uninst>--> open-ldap (uninst,normal)

open-ldap (uninst,normal) nr.IN-edges =  3
 GO EDGES: ---libldap2-dev---> krb5 (stage1,normal)
 RETURN EDGES: 
 INST EDGE: --<open-ldap,normal>--> open-ldap (normal,D)

open-ldap (normal,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: ---libkrb5-dev---> krb5 (normal,D)
 INST EDGE: { }


---------------------- PLAN SYNTHESIS START ----------------------
Added action [Create instance krb5:krb5] to the plan.
Added action [Create instance open-ldap:open-ldap] to the plan.
External loop iteration i = 0

*********************** Internal loop iteration j = 0
Plan BEFORE: 
 Act. nr.1 : [Create instance krb5:krb5]
 Act. nr.2 : [Create instance open-ldap:open-ldap]
Vertex popped: open-ldap (C,uninst)
STACK = 
krb5 (C,uninst) | 
Deal with return/red edges
Deal with go/blue edges
Deal with successor vertex.
Vertex removed: open-ldap (C,uninst)

*********************** Internal loop iteration j = 1
Plan BEFORE: 
 Act. nr.1 : [Create instance krb5:krb5]
 Act. nr.2 : [Create instance open-ldap:open-ldap]
 Act. nr.3 : [open-ldap : bind port ldap-uninst-p to instance krb5]
Vertex popped: krb5 (C,uninst)
STACK = 
[]
Deal with return/red edges
Deal with go/blue edges
Deal with successor vertex.
INST Edge: PUSH vertex: krb5 (uninst,stage1)
STACK = 
krb5 (uninst,stage1) | 
Vertex removed: krb5 (C,uninst)

*********************** Internal loop iteration j = 2
Plan BEFORE: 
 Act. nr.1 : [Create instance krb5:krb5]
 Act. nr.2 : [Create instance open-ldap:open-ldap]
 Act. nr.3 : [open-ldap : bind port ldap-uninst-p to instance krb5]
Vertex popped: krb5 (uninst,stage1)
STACK = 
[]
Deal with return/red edges
Deal with go/blue edges
It's an intermediate vertex => add action [krb5 : change state from uninst to stage1] to the plan.
Deal with successor vertex.
Vertex removed: krb5 (uninst,stage1)

 ************************* NEED INSTANCE DUPLICATION *************************** 
The list of candidates is the following one: open-ldap (uninst,normal)
Chosen vertex for splitting = open-ldap (uninst,normal)
Built the following new vertex = open-ldap' (uninst,D)
Pushed duplicated vertex: open-ldap (uninst,normal)
STACK = 
open-ldap (uninst,normal) | 
External loop iteration i = 1

*********************** Internal loop iteration j = 0
Plan BEFORE: 
 Act. nr.1 : [Create instance krb5:krb5]
 Act. nr.2 : [Create instance open-ldap':open-ldap]
 Act. nr.3 : [Create instance open-ldap:open-ldap]
 Act. nr.4 : [open-ldap' : bind port ldap-uninst-p to instance krb5]
 Act. nr.5 : [krb5 : bind port libkrb5-dev to instance open-ldap']
 Act. nr.6 : [krb5 : bind port libkrb5-dev to instance open-ldap]
 Act. nr.7 : [krb5 : change state from uninst to stage1]
Vertex popped: open-ldap (uninst,normal)
STACK = 
[]
Deal with return/red edges
Deal with go/blue edges
GO Edge: PUSH vertex: krb5 (stage1,normal)
STACK = 
krb5 (stage1,normal) | 
It's an intermediate vertex => add action [open-ldap : change state from uninst to normal] to the plan.
Deal with successor vertex.
Vertex removed: open-ldap (uninst,normal)

*********************** Internal loop iteration j = 1
Plan BEFORE: 
 Act. nr.1 : [Create instance krb5:krb5]
 Act. nr.2 : [Create instance open-ldap':open-ldap]
 Act. nr.3 : [Create instance open-ldap:open-ldap]
 Act. nr.4 : [open-ldap' : bind port ldap-uninst-p to instance krb5]
 Act. nr.5 : [krb5 : bind port libkrb5-dev to instance open-ldap']
 Act. nr.6 : [krb5 : bind port libkrb5-dev to instance open-ldap]
 Act. nr.7 : [krb5 : change state from uninst to stage1]
 Act. nr.8 : [open-ldap : bind port libldap2-dev to instance krb5]
 Act. nr.9 : [open-ldap : change state from uninst to normal]
Vertex popped: krb5 (stage1,normal)
STACK = 
[]
Deal with return/red edges
Deal with go/blue edges
It's an intermediate vertex => add action [krb5 : change state from stage1 to normal] to the plan.
Deal with successor vertex.
Target has been REACHED.
Vertex removed: krb5 (stage1,normal)

The computed PLAN: 
 Act. nr.1 : [Create instance krb5:krb5]
 Act. nr.2 : [Create instance open-ldap':open-ldap]
 Act. nr.3 : [Create instance open-ldap:open-ldap]
 Act. nr.4 : [open-ldap' : bind port ldap-uninst-p to instance krb5]
 Act. nr.5 : [krb5 : bind port libkrb5-dev to instance open-ldap']
 Act. nr.6 : [krb5 : bind port libkrb5-dev to instance open-ldap]
 Act. nr.7 : [krb5 : change state from uninst to stage1]
 Act. nr.8 : [open-ldap : bind port libldap2-dev to instance krb5]
 Act. nr.9 : [open-ldap : change state from uninst to normal]
 Act. nr.10 : [krb5 : change state from stage1 to normal]
