
We generate the FULL G-GRAPH: 

Generation nr.0: <Wordpress_3,NotInstalled>; <Wordpress_2,NotInstalled>; <Wordpress_1,NotInstalled>; <Varnish,NotInstalled>; <Httpd,NotInstalled>; <Sharing,Init>; <Mysql,NotInstalled>
Generation nr.1: <Mysql,NotInstalled>_1; <Sharing,Init>_1; <Httpd,NotInstalled>_1; <Varnish,NotInstalled>_1; <Wordpress_1,NotInstalled>_1; <Wordpress_2,NotInstalled>_1; <Wordpress_3,NotInstalled>_1; <Wordpress_3,Installed>; <Wordpress_2,Installed>; <Wordpress_1,Installed>; <Varnish,Installed>; <Httpd,Installed>; <Mysql,Installed>
Generation nr.2: <Mysql,Installed>_1; <Httpd,Installed>_1; <Varnish,Installed>_1; <Wordpress_1,Installed>_1; <Wordpress_2,Installed>_1; <Wordpress_3,Installed>_1; <Wordpress_3,NotInstalled>_2; <Wordpress_2,NotInstalled>_2; <Wordpress_1,NotInstalled>_2; <Varnish,NotInstalled>_2; <Httpd,NotInstalled>_2; <Sharing,Init>_2; <Mysql,NotInstalled>_2; <Wordpress_3,Template>; <Wordpress_2,Template>; <Wordpress_1,Template>; <Httpd,Configured>; <Mysql,SetRootPassword>; <Mysql,ResetRootPassword>
Generation nr.3: <Mysql,ResetRootPassword>_1; <Mysql,SetRootPassword>_1; <Httpd,Configured>_1; <Wordpress_1,Template>_1; <Wordpress_2,Template>_1; <Wordpress_3,Template>_1; <Mysql,NotInstalled>_3; <Sharing,Init>_3; <Httpd,NotInstalled>_3; <Varnish,NotInstalled>_3; <Wordpress_1,NotInstalled>_3; <Wordpress_2,NotInstalled>_3; <Wordpress_3,NotInstalled>_3; <Wordpress_3,Installed>_2; <Wordpress_2,Installed>_2; <Wordpress_1,Installed>_2; <Varnish,Installed>_2; <Httpd,Installed>_2; <Mysql,Installed>_2; <Httpd,Active>; <Mysql,Configured>
Generation nr.4: <Mysql,Configured>_1; <Httpd,Active>_1; <Mysql,Installed>_3; <Httpd,Installed>_3; <Varnish,Installed>_3; <Wordpress_1,Installed>_3; <Wordpress_2,Installed>_3; <Wordpress_3,Installed>_3; <Wordpress_3,NotInstalled>_4; <Wordpress_2,NotInstalled>_4; <Wordpress_1,NotInstalled>_4; <Varnish,NotInstalled>_4; <Httpd,NotInstalled>_4; <Sharing,Init>_4; <Mysql,NotInstalled>_4; <Wordpress_3,Template>_2; <Wordpress_2,Template>_2; <Wordpress_1,Template>_2; <Httpd,Configured>_2; <Mysql,SetRootPassword>_2; <Mysql,ResetRootPassword>_2; <Mysql,ConfiguredAsSlave>; <Mysql,ConfiguredAsMaster>; <Mysql,Active.ActiveOnMBS>
Generation nr.5: <Mysql,Active.ActiveOnMBS>_1; <Mysql,ConfiguredAsMaster>_1; <Mysql,ConfiguredAsSlave>_1; <Mysql,ResetRootPassword>_3; <Mysql,SetRootPassword>_3; <Httpd,Configured>_3; <Wordpress_1,Template>_3; <Wordpress_2,Template>_3; <Wordpress_3,Template>_3; <Mysql,NotInstalled>_5; <Sharing,Init>_5; <Httpd,NotInstalled>_5; <Varnish,NotInstalled>_5; <Wordpress_1,NotInstalled>_5; <Wordpress_2,NotInstalled>_5; <Wordpress_3,NotInstalled>_5; <Wordpress_3,Installed>_4; <Wordpress_2,Installed>_4; <Wordpress_1,Installed>_4; <Varnish,Installed>_4; <Httpd,Installed>_4; <Mysql,Installed>_4; <Httpd,Active>_2; <Mysql,Configured>_2; <Mysql,Active>
Generation nr.6: <Mysql,Active>_1; <Mysql,Configured>_3; <Httpd,Active>_3; <Mysql,Installed>_5; <Httpd,Installed>_5; <Varnish,Installed>_5; <Wordpress_1,Installed>_5; <Wordpress_2,Installed>_5; <Wordpress_3,Installed>_5; <Wordpress_3,NotInstalled>_6; <Wordpress_2,NotInstalled>_6; <Wordpress_1,NotInstalled>_6; <Varnish,NotInstalled>_6; <Httpd,NotInstalled>_6; <Sharing,Init>_6; <Mysql,NotInstalled>_6; <Wordpress_3,Template>_4; <Wordpress_2,Template>_4; <Wordpress_1,Template>_4; <Httpd,Configured>_4; <Mysql,SetRootPassword>_4; <Mysql,ResetRootPassword>_4; <Mysql,ConfiguredAsSlave>_2; <Mysql,ConfiguredAsMaster>_2; <Mysql,Active.ActiveOnMBS>_2; <Wordpress_1,Configured>; <Wordpress_2,Configured>; <Wordpress_3,Configured>
Generation nr.7: <Wordpress_3,Configured>_1; <Wordpress_2,Configured>_1; <Wordpress_1,Configured>_1; <Mysql,Active.ActiveOnMBS>_3; <Mysql,ConfiguredAsMaster>_3; <Mysql,ConfiguredAsSlave>_3; <Mysql,ResetRootPassword>_5; <Mysql,SetRootPassword>_5; <Httpd,Configured>_5; <Wordpress_1,Template>_5; <Wordpress_2,Template>_5; <Wordpress_3,Template>_5; <Mysql,NotInstalled>_7; <Sharing,Init>_7; <Httpd,NotInstalled>_7; <Varnish,NotInstalled>_7; <Wordpress_1,NotInstalled>_7; <Wordpress_2,NotInstalled>_7; <Wordpress_3,NotInstalled>_7; <Wordpress_3,Installed>_6; <Wordpress_2,Installed>_6; <Wordpress_1,Installed>_6; <Varnish,Installed>_6; <Httpd,Installed>_6; <Mysql,Installed>_6; <Httpd,Active>_4; <Mysql,Configured>_4; <Mysql,Active>_2; <Wordpress_1,Active>; <Wordpress_2,Active>; <Wordpress_3,Active>
Generation nr.8: <Wordpress_3,Active>_1; <Wordpress_2,Active>_1; <Wordpress_1,Active>_1; <Mysql,Active>_3; <Mysql,Configured>_5; <Httpd,Active>_5; <Mysql,Installed>_7; <Httpd,Installed>_7; <Varnish,Installed>_7; <Wordpress_1,Installed>_7; <Wordpress_2,Installed>_7; <Wordpress_3,Installed>_7; <Wordpress_3,NotInstalled>_8; <Wordpress_2,NotInstalled>_8; <Wordpress_1,NotInstalled>_8; <Varnish,NotInstalled>_8; <Httpd,NotInstalled>_8; <Sharing,Init>_8; <Mysql,NotInstalled>_8; <Wordpress_3,Template>_6; <Wordpress_2,Template>_6; <Wordpress_1,Template>_6; <Httpd,Configured>_6; <Mysql,SetRootPassword>_6; <Mysql,ResetRootPassword>_6; <Mysql,ConfiguredAsSlave>_4; <Mysql,ConfiguredAsMaster>_4; <Mysql,Active.ActiveOnMBS>_4; <Wordpress_1,Configured>_2; <Wordpress_2,Configured>_2; <Wordpress_3,Configured>_2; <Varnish,Configured>
Generation nr.9: <Varnish,Configured>_1; <Wordpress_3,Configured>_3; <Wordpress_2,Configured>_3; <Wordpress_1,Configured>_3; <Mysql,Active.ActiveOnMBS>_5; <Mysql,ConfiguredAsMaster>_5; <Mysql,ConfiguredAsSlave>_5; <Mysql,ResetRootPassword>_7; <Mysql,SetRootPassword>_7; <Httpd,Configured>_7; <Wordpress_1,Template>_7; <Wordpress_2,Template>_7; <Wordpress_3,Template>_7; <Mysql,NotInstalled>_9; <Sharing,Init>_9; <Httpd,NotInstalled>_9; <Varnish,NotInstalled>_9; <Wordpress_1,NotInstalled>_9; <Wordpress_2,NotInstalled>_9; <Wordpress_3,NotInstalled>_9; <Wordpress_3,Installed>_8; <Wordpress_2,Installed>_8; <Wordpress_1,Installed>_8; <Varnish,Installed>_8; <Httpd,Installed>_8; <Mysql,Installed>_8; <Httpd,Active>_6; <Mysql,Configured>_6; <Mysql,Active>_4; <Wordpress_1,Active>_2; <Wordpress_2,Active>_2; <Wordpress_3,Active>_2; <Varnish,Active>

BOTTOM-UP VISIT of the G-graph. For every node we choose origin node and providers.
Total requires: 
fanIn[<Wordpress_3,Active>_1] := 0
fanIn[<Wordpress_2,Active>_1] := 0
fanIn[<Wordpress_1,Active>_1] := 0
fanIn[<Mysql,Active>_3] := 0
fanIn[<Mysql,Configured>_5] := 0
fanIn[<Httpd,Active>_5] := 0
fanIn[<Mysql,Installed>_7] := 0
fanIn[<Httpd,Installed>_7] := 0
fanIn[<Varnish,Installed>_7] := 0
fanIn[<Wordpress_1,Installed>_7] := 0
fanIn[<Wordpress_2,Installed>_7] := 0
fanIn[<Wordpress_3,Installed>_7] := 0
fanIn[<Wordpress_3,NotInstalled>_8] := 0
fanIn[<Wordpress_2,NotInstalled>_8] := 0
fanIn[<Wordpress_1,NotInstalled>_8] := 0
fanIn[<Varnish,NotInstalled>_8] := 0
fanIn[<Httpd,NotInstalled>_8] := 0
fanIn[<Sharing,Init>_8] := 0
fanIn[<Mysql,NotInstalled>_8] := 0
fanIn[<Wordpress_3,Template>_6] := 0
fanIn[<Wordpress_2,Template>_6] := 0
fanIn[<Wordpress_1,Template>_6] := 0
fanIn[<Httpd,Configured>_6] := 0
fanIn[<Mysql,SetRootPassword>_6] := 0
fanIn[<Mysql,ResetRootPassword>_6] := 0
fanIn[<Mysql,ConfiguredAsSlave>_4] := 0
fanIn[<Mysql,ConfiguredAsMaster>_4] := 0
fanIn[<Mysql,Active.ActiveOnMBS>_4] := 0
fanIn[<Wordpress_1,Configured>_2] := 0
fanIn[<Wordpress_2,Configured>_2] := 0
fanIn[<Wordpress_3,Configured>_2] := 0
fanIn[<Varnish,Configured>] := 0
Nodes with fanIn values:
<Wordpress_3,Active>_1, fanIn = 0 | <Wordpress_2,Active>_1, fanIn = 0 | <Wordpress_1,Active>_1, fanIn = 0 | <Mysql,Active>_3, fanIn = 0 | <Mysql,Configured>_5, fanIn = 0 | <Httpd,Active>_5, fanIn = 0 | <Mysql,Installed>_7, fanIn = 0 | <Httpd,Installed>_7, fanIn = 0 | <Varnish,Installed>_7, fanIn = 0 | <Wordpress_1,Installed>_7, fanIn = 0 | <Wordpress_2,Installed>_7, fanIn = 0 | <Wordpress_3,Installed>_7, fanIn = 0 | <Wordpress_3,NotInstalled>_8, fanIn = 0 | <Wordpress_2,NotInstalled>_8, fanIn = 0 | <Wordpress_1,NotInstalled>_8, fanIn = 0 | <Varnish,NotInstalled>_8, fanIn = 0 | <Httpd,NotInstalled>_8, fanIn = 0 | <Sharing,Init>_8, fanIn = 0 | <Mysql,NotInstalled>_8, fanIn = 0 | <Wordpress_3,Template>_6, fanIn = 0 | <Wordpress_2,Template>_6, fanIn = 0 | <Wordpress_1,Template>_6, fanIn = 0 | <Httpd,Configured>_6, fanIn = 0 | <Mysql,SetRootPassword>_6, fanIn = 0 | <Mysql,ResetRootPassword>_6, fanIn = 0 | <Mysql,ConfiguredAsSlave>_4, fanIn = 0 | <Mysql,ConfiguredAsMaster>_4, fanIn = 0 | <Mysql,Active.ActiveOnMBS>_4, fanIn = 0 | <Wordpress_1,Configured>_2, fanIn = 0 | <Wordpress_2,Configured>_2, fanIn = 0 | <Wordpress_3,Configured>_2, fanIn = 0 | <Varnish,Configured>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 9 CYCLE execution nr. 1 ----------------
node to be examined: <Varnish,Active>
<Varnish,Active> is NOT an initial node => need to look for parent
<Varnish,Configured> chosen with max fanIn value
origin node chosen: <Varnish,Configured>
<Varnish,Active> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.9: <Varnish,Active>
next working set, at level nr.8 : { <Varnish,Configured>  }
Nodes with fanIn values:
<Wordpress_3,Active>_1, fanIn = 0 | <Wordpress_2,Active>_1, fanIn = 0 | <Wordpress_1,Active>_1, fanIn = 0 | <Mysql,Active>_3, fanIn = 0 | <Mysql,Configured>_5, fanIn = 0 | <Httpd,Active>_5, fanIn = 0 | <Mysql,Installed>_7, fanIn = 0 | <Httpd,Installed>_7, fanIn = 0 | <Varnish,Installed>_7, fanIn = 0 | <Wordpress_1,Installed>_7, fanIn = 0 | <Wordpress_2,Installed>_7, fanIn = 0 | <Wordpress_3,Installed>_7, fanIn = 0 | <Wordpress_3,NotInstalled>_8, fanIn = 0 | <Wordpress_2,NotInstalled>_8, fanIn = 0 | <Wordpress_1,NotInstalled>_8, fanIn = 0 | <Varnish,NotInstalled>_8, fanIn = 0 | <Httpd,NotInstalled>_8, fanIn = 0 | <Sharing,Init>_8, fanIn = 0 | <Mysql,NotInstalled>_8, fanIn = 0 | <Wordpress_3,Template>_6, fanIn = 0 | <Wordpress_2,Template>_6, fanIn = 0 | <Wordpress_1,Template>_6, fanIn = 0 | <Httpd,Configured>_6, fanIn = 0 | <Mysql,SetRootPassword>_6, fanIn = 0 | <Mysql,ResetRootPassword>_6, fanIn = 0 | <Mysql,ConfiguredAsSlave>_4, fanIn = 0 | <Mysql,ConfiguredAsMaster>_4, fanIn = 0 | <Mysql,Active.ActiveOnMBS>_4, fanIn = 0 | <Wordpress_1,Configured>_2, fanIn = 0 | <Wordpress_2,Configured>_2, fanIn = 0 | <Wordpress_3,Configured>_2, fanIn = 0 | <Varnish,Configured>, fanIn = 0
Total requires: /mbs/Wordpress-1/Active/get_website | /mbs/Wordpress-2/Active/get_website | /mbs/Wordpress-3/Active/get_website
fanIn[<Wordpress_3,Configured>_1] := 0
fanIn[<Wordpress_2,Configured>_1] := 0
fanIn[<Wordpress_1,Configured>_1] := 0
fanIn[<Mysql,Active.ActiveOnMBS>_3] := 0
fanIn[<Mysql,ConfiguredAsMaster>_3] := 0
fanIn[<Mysql,ConfiguredAsSlave>_3] := 0
fanIn[<Mysql,ResetRootPassword>_5] := 0
fanIn[<Mysql,SetRootPassword>_5] := 0
fanIn[<Httpd,Configured>_5] := 0
fanIn[<Wordpress_1,Template>_5] := 0
fanIn[<Wordpress_2,Template>_5] := 0
fanIn[<Wordpress_3,Template>_5] := 0
fanIn[<Mysql,NotInstalled>_7] := 0
fanIn[<Sharing,Init>_7] := 0
fanIn[<Httpd,NotInstalled>_7] := 0
fanIn[<Varnish,NotInstalled>_7] := 0
fanIn[<Wordpress_1,NotInstalled>_7] := 0
fanIn[<Wordpress_2,NotInstalled>_7] := 0
fanIn[<Wordpress_3,NotInstalled>_7] := 0
fanIn[<Wordpress_3,Installed>_6] := 0
fanIn[<Wordpress_2,Installed>_6] := 0
fanIn[<Wordpress_1,Installed>_6] := 0
fanIn[<Varnish,Installed>_6] := 0
fanIn[<Httpd,Installed>_6] := 0
fanIn[<Mysql,Installed>_6] := 0
fanIn[<Httpd,Active>_4] := 0
fanIn[<Mysql,Configured>_4] := 0
fanIn[<Mysql,Active>_2] := 0
fanIn[<Wordpress_1,Active>] := 1
fanIn[<Wordpress_2,Active>] := 1
fanIn[<Wordpress_3,Active>] := 1
Nodes with fanIn values:
<Wordpress_3,Configured>_1, fanIn = 0 | <Wordpress_2,Configured>_1, fanIn = 0 | <Wordpress_1,Configured>_1, fanIn = 0 | <Mysql,Active.ActiveOnMBS>_3, fanIn = 0 | <Mysql,ConfiguredAsMaster>_3, fanIn = 0 | <Mysql,ConfiguredAsSlave>_3, fanIn = 0 | <Mysql,ResetRootPassword>_5, fanIn = 0 | <Mysql,SetRootPassword>_5, fanIn = 0 | <Httpd,Configured>_5, fanIn = 0 | <Wordpress_1,Template>_5, fanIn = 0 | <Wordpress_2,Template>_5, fanIn = 0 | <Wordpress_3,Template>_5, fanIn = 0 | <Mysql,NotInstalled>_7, fanIn = 0 | <Sharing,Init>_7, fanIn = 0 | <Httpd,NotInstalled>_7, fanIn = 0 | <Varnish,NotInstalled>_7, fanIn = 0 | <Wordpress_1,NotInstalled>_7, fanIn = 0 | <Wordpress_2,NotInstalled>_7, fanIn = 0 | <Wordpress_3,NotInstalled>_7, fanIn = 0 | <Wordpress_3,Installed>_6, fanIn = 0 | <Wordpress_2,Installed>_6, fanIn = 0 | <Wordpress_1,Installed>_6, fanIn = 0 | <Varnish,Installed>_6, fanIn = 0 | <Httpd,Installed>_6, fanIn = 0 | <Mysql,Installed>_6, fanIn = 0 | <Httpd,Active>_4, fanIn = 0 | <Mysql,Configured>_4, fanIn = 0 | <Mysql,Active>_2, fanIn = 0 | <Wordpress_1,Active>, fanIn = 1 | <Wordpress_2,Active>, fanIn = 1 | <Wordpress_3,Active>, fanIn = 1

 ----------------- BOTTOM-UP VISIT LEVEL nr. 8 CYCLE execution nr. 1 ----------------
node to be examined: <Varnish,Configured>
<Varnish,Configured> is NOT an initial node => need to look for parent
<Varnish,Installed>_6 chosen with max fanIn value
origin node chosen: <Varnish,Installed>_6
<Varnish,Configured> is NOT a copy => must take care of providers
<Wordpress_1,Active> chosen with max fanIn value
Update fanIn : fanIn[<Wordpress_1,Active>] <- 0 (due to provide get_network_port)
Update fanIn : fanIn[<Wordpress_2,Active>] <- 0 (due to provide get_network_port)
Update fanIn : fanIn[<Wordpress_3,Active>] <- 0 (due to provide get_network_port)
<Wordpress_2,Active> chosen with max fanIn value
<Wordpress_3,Active> chosen with max fanIn value
list of chosen providers: <Wordpress_1,Active> <Wordpress_2,Active> <Wordpress_3,Active> 
current generation: Generation nr.8: <Varnish,Configured>
next working set, at level nr.7 : { <Wordpress_1,Active> <Wordpress_2,Active> <Wordpress_3,Active> <Varnish,Installed>_6  }
Nodes with fanIn values:
<Wordpress_3,Configured>_1, fanIn = 0 | <Wordpress_2,Configured>_1, fanIn = 0 | <Wordpress_1,Configured>_1, fanIn = 0 | <Mysql,Active.ActiveOnMBS>_3, fanIn = 0 | <Mysql,ConfiguredAsMaster>_3, fanIn = 0 | <Mysql,ConfiguredAsSlave>_3, fanIn = 0 | <Mysql,ResetRootPassword>_5, fanIn = 0 | <Mysql,SetRootPassword>_5, fanIn = 0 | <Httpd,Configured>_5, fanIn = 0 | <Wordpress_1,Template>_5, fanIn = 0 | <Wordpress_2,Template>_5, fanIn = 0 | <Wordpress_3,Template>_5, fanIn = 0 | <Mysql,NotInstalled>_7, fanIn = 0 | <Sharing,Init>_7, fanIn = 0 | <Httpd,NotInstalled>_7, fanIn = 0 | <Varnish,NotInstalled>_7, fanIn = 0 | <Wordpress_1,NotInstalled>_7, fanIn = 0 | <Wordpress_2,NotInstalled>_7, fanIn = 0 | <Wordpress_3,NotInstalled>_7, fanIn = 0 | <Wordpress_3,Installed>_6, fanIn = 0 | <Wordpress_2,Installed>_6, fanIn = 0 | <Wordpress_1,Installed>_6, fanIn = 0 | <Varnish,Installed>_6, fanIn = 0 | <Httpd,Installed>_6, fanIn = 0 | <Mysql,Installed>_6, fanIn = 0 | <Httpd,Active>_4, fanIn = 0 | <Mysql,Configured>_4, fanIn = 0 | <Mysql,Active>_2, fanIn = 0 | <Wordpress_1,Active>, fanIn = 0 | <Wordpress_2,Active>, fanIn = 0 | <Wordpress_3,Active>, fanIn = 0
Total requires: /mbs/Httpd/Active/start | Httpd.get_documentRoot | /mbs/Httpd/Active/start | Httpd.get_documentRoot | /mbs/Httpd/Active/start | Httpd.get_documentRoot
fanIn[<Mysql,Active>_1] := 0
fanIn[<Mysql,Configured>_3] := 0
fanIn[<Httpd,Active>_3] := 2
fanIn[<Mysql,Installed>_5] := 0
fanIn[<Httpd,Installed>_5] := 0
fanIn[<Varnish,Installed>_5] := 0
fanIn[<Wordpress_1,Installed>_5] := 0
fanIn[<Wordpress_2,Installed>_5] := 0
fanIn[<Wordpress_3,Installed>_5] := 0
fanIn[<Wordpress_3,NotInstalled>_6] := 0
fanIn[<Wordpress_2,NotInstalled>_6] := 0
fanIn[<Wordpress_1,NotInstalled>_6] := 0
fanIn[<Varnish,NotInstalled>_6] := 0
fanIn[<Httpd,NotInstalled>_6] := 0
fanIn[<Sharing,Init>_6] := 0
fanIn[<Mysql,NotInstalled>_6] := 0
fanIn[<Wordpress_3,Template>_4] := 0
fanIn[<Wordpress_2,Template>_4] := 0
fanIn[<Wordpress_1,Template>_4] := 0
fanIn[<Httpd,Configured>_4] := 1
fanIn[<Mysql,SetRootPassword>_4] := 0
fanIn[<Mysql,ResetRootPassword>_4] := 0
fanIn[<Mysql,ConfiguredAsSlave>_2] := 0
fanIn[<Mysql,ConfiguredAsMaster>_2] := 0
fanIn[<Mysql,Active.ActiveOnMBS>_2] := 0
fanIn[<Wordpress_1,Configured>] := 0
fanIn[<Wordpress_2,Configured>] := 0
fanIn[<Wordpress_3,Configured>] := 0
Nodes with fanIn values:
<Mysql,Active>_1, fanIn = 0 | <Mysql,Configured>_3, fanIn = 0 | <Httpd,Active>_3, fanIn = 2 | <Mysql,Installed>_5, fanIn = 0 | <Httpd,Installed>_5, fanIn = 0 | <Varnish,Installed>_5, fanIn = 0 | <Wordpress_1,Installed>_5, fanIn = 0 | <Wordpress_2,Installed>_5, fanIn = 0 | <Wordpress_3,Installed>_5, fanIn = 0 | <Wordpress_3,NotInstalled>_6, fanIn = 0 | <Wordpress_2,NotInstalled>_6, fanIn = 0 | <Wordpress_1,NotInstalled>_6, fanIn = 0 | <Varnish,NotInstalled>_6, fanIn = 0 | <Httpd,NotInstalled>_6, fanIn = 0 | <Sharing,Init>_6, fanIn = 0 | <Mysql,NotInstalled>_6, fanIn = 0 | <Wordpress_3,Template>_4, fanIn = 0 | <Wordpress_2,Template>_4, fanIn = 0 | <Wordpress_1,Template>_4, fanIn = 0 | <Httpd,Configured>_4, fanIn = 1 | <Mysql,SetRootPassword>_4, fanIn = 0 | <Mysql,ResetRootPassword>_4, fanIn = 0 | <Mysql,ConfiguredAsSlave>_2, fanIn = 0 | <Mysql,ConfiguredAsMaster>_2, fanIn = 0 | <Mysql,Active.ActiveOnMBS>_2, fanIn = 0 | <Wordpress_1,Configured>, fanIn = 0 | <Wordpress_2,Configured>, fanIn = 0 | <Wordpress_3,Configured>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 7 CYCLE execution nr. 1 ----------------
node to be examined: <Wordpress_1,Active>
<Wordpress_1,Active> is NOT an initial node => need to look for parent
<Wordpress_1,Configured> chosen with max fanIn value
origin node chosen: <Wordpress_1,Configured>
<Wordpress_1,Active> is NOT a copy => must take care of providers
<Httpd,Active>_3 chosen with max fanIn value
Update fanIn : fanIn[<Httpd,Active>_3] <- 1 (due to provide Httpd.get_documentRoot)
Update fanIn : fanIn[<Httpd,Active>_3] <- 0 (due to provide Httpd.set_port)
Update fanIn : fanIn[<Httpd,Configured>_4] <- 0 (due to provide Httpd.get_documentRoot)
list of chosen providers: <Httpd,Active>_3 
current generation: Generation nr.7: <Wordpress_1,Active>
next working set, at level nr.6 : { <Httpd,Active>_3 <Wordpress_1,Configured>  }
Nodes with fanIn values:
<Mysql,Active>_1, fanIn = 0 | <Mysql,Configured>_3, fanIn = 0 | <Httpd,Active>_3, fanIn = 0 | <Mysql,Installed>_5, fanIn = 0 | <Httpd,Installed>_5, fanIn = 0 | <Varnish,Installed>_5, fanIn = 0 | <Wordpress_1,Installed>_5, fanIn = 0 | <Wordpress_2,Installed>_5, fanIn = 0 | <Wordpress_3,Installed>_5, fanIn = 0 | <Wordpress_3,NotInstalled>_6, fanIn = 0 | <Wordpress_2,NotInstalled>_6, fanIn = 0 | <Wordpress_1,NotInstalled>_6, fanIn = 0 | <Varnish,NotInstalled>_6, fanIn = 0 | <Httpd,NotInstalled>_6, fanIn = 0 | <Sharing,Init>_6, fanIn = 0 | <Mysql,NotInstalled>_6, fanIn = 0 | <Wordpress_3,Template>_4, fanIn = 0 | <Wordpress_2,Template>_4, fanIn = 0 | <Wordpress_1,Template>_4, fanIn = 0 | <Httpd,Configured>_4, fanIn = 0 | <Mysql,SetRootPassword>_4, fanIn = 0 | <Mysql,ResetRootPassword>_4, fanIn = 0 | <Mysql,ConfiguredAsSlave>_2, fanIn = 0 | <Mysql,ConfiguredAsMaster>_2, fanIn = 0 | <Mysql,Active.ActiveOnMBS>_2, fanIn = 0 | <Wordpress_1,Configured>, fanIn = 0 | <Wordpress_2,Configured>, fanIn = 0 | <Wordpress_3,Configured>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 7 CYCLE execution nr. 2 ----------------
node to be examined: <Wordpress_2,Active>
<Wordpress_2,Active> is NOT an initial node => need to look for parent
<Wordpress_2,Configured> chosen with max fanIn value
origin node chosen: <Wordpress_2,Configured>
<Wordpress_2,Active> is NOT a copy => must take care of providers
<Httpd,Active>_3 chosen with max fanIn value
list of chosen providers: <Httpd,Active>_3 
current generation: Generation nr.7: <Wordpress_2,Active>; <Wordpress_1,Active>
next working set, at level nr.6 : { <Httpd,Active>_3 <Wordpress_2,Configured> <Wordpress_1,Configured>  }
Nodes with fanIn values:
<Mysql,Active>_1, fanIn = 0 | <Mysql,Configured>_3, fanIn = 0 | <Httpd,Active>_3, fanIn = 0 | <Mysql,Installed>_5, fanIn = 0 | <Httpd,Installed>_5, fanIn = 0 | <Varnish,Installed>_5, fanIn = 0 | <Wordpress_1,Installed>_5, fanIn = 0 | <Wordpress_2,Installed>_5, fanIn = 0 | <Wordpress_3,Installed>_5, fanIn = 0 | <Wordpress_3,NotInstalled>_6, fanIn = 0 | <Wordpress_2,NotInstalled>_6, fanIn = 0 | <Wordpress_1,NotInstalled>_6, fanIn = 0 | <Varnish,NotInstalled>_6, fanIn = 0 | <Httpd,NotInstalled>_6, fanIn = 0 | <Sharing,Init>_6, fanIn = 0 | <Mysql,NotInstalled>_6, fanIn = 0 | <Wordpress_3,Template>_4, fanIn = 0 | <Wordpress_2,Template>_4, fanIn = 0 | <Wordpress_1,Template>_4, fanIn = 0 | <Httpd,Configured>_4, fanIn = 0 | <Mysql,SetRootPassword>_4, fanIn = 0 | <Mysql,ResetRootPassword>_4, fanIn = 0 | <Mysql,ConfiguredAsSlave>_2, fanIn = 0 | <Mysql,ConfiguredAsMaster>_2, fanIn = 0 | <Mysql,Active.ActiveOnMBS>_2, fanIn = 0 | <Wordpress_1,Configured>, fanIn = 0 | <Wordpress_2,Configured>, fanIn = 0 | <Wordpress_3,Configured>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 7 CYCLE execution nr. 3 ----------------
node to be examined: <Wordpress_3,Active>
<Wordpress_3,Active> is NOT an initial node => need to look for parent
<Wordpress_3,Configured> chosen with max fanIn value
origin node chosen: <Wordpress_3,Configured>
<Wordpress_3,Active> is NOT a copy => must take care of providers
<Httpd,Active>_3 chosen with max fanIn value
list of chosen providers: <Httpd,Active>_3 
current generation: Generation nr.7: <Wordpress_3,Active>; <Wordpress_2,Active>; <Wordpress_1,Active>
next working set, at level nr.6 : { <Httpd,Active>_3 <Wordpress_3,Configured> <Wordpress_2,Configured> <Wordpress_1,Configured>  }
Nodes with fanIn values:
<Mysql,Active>_1, fanIn = 0 | <Mysql,Configured>_3, fanIn = 0 | <Httpd,Active>_3, fanIn = 0 | <Mysql,Installed>_5, fanIn = 0 | <Httpd,Installed>_5, fanIn = 0 | <Varnish,Installed>_5, fanIn = 0 | <Wordpress_1,Installed>_5, fanIn = 0 | <Wordpress_2,Installed>_5, fanIn = 0 | <Wordpress_3,Installed>_5, fanIn = 0 | <Wordpress_3,NotInstalled>_6, fanIn = 0 | <Wordpress_2,NotInstalled>_6, fanIn = 0 | <Wordpress_1,NotInstalled>_6, fanIn = 0 | <Varnish,NotInstalled>_6, fanIn = 0 | <Httpd,NotInstalled>_6, fanIn = 0 | <Sharing,Init>_6, fanIn = 0 | <Mysql,NotInstalled>_6, fanIn = 0 | <Wordpress_3,Template>_4, fanIn = 0 | <Wordpress_2,Template>_4, fanIn = 0 | <Wordpress_1,Template>_4, fanIn = 0 | <Httpd,Configured>_4, fanIn = 0 | <Mysql,SetRootPassword>_4, fanIn = 0 | <Mysql,ResetRootPassword>_4, fanIn = 0 | <Mysql,ConfiguredAsSlave>_2, fanIn = 0 | <Mysql,ConfiguredAsMaster>_2, fanIn = 0 | <Mysql,Active.ActiveOnMBS>_2, fanIn = 0 | <Wordpress_1,Configured>, fanIn = 0 | <Wordpress_2,Configured>, fanIn = 0 | <Wordpress_3,Configured>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 7 CYCLE execution nr. 4 ----------------
node to be examined: <Varnish,Installed>_6
<Varnish,Installed>_6 is NOT an initial node => need to look for parent
<Varnish,Installed>_5 chosen as a copy
origin node chosen: <Varnish,Installed>_5
current generation: Generation nr.7: <Varnish,Installed>_6; <Wordpress_3,Active>; <Wordpress_2,Active>; <Wordpress_1,Active>
next working set, at level nr.6 : { <Varnish,Installed>_5 <Httpd,Active>_3 <Wordpress_3,Configured> <Wordpress_2,Configured> <Wordpress_1,Configured>  }
Nodes with fanIn values:
<Mysql,Active>_1, fanIn = 0 | <Mysql,Configured>_3, fanIn = 0 | <Httpd,Active>_3, fanIn = 0 | <Mysql,Installed>_5, fanIn = 0 | <Httpd,Installed>_5, fanIn = 0 | <Varnish,Installed>_5, fanIn = 0 | <Wordpress_1,Installed>_5, fanIn = 0 | <Wordpress_2,Installed>_5, fanIn = 0 | <Wordpress_3,Installed>_5, fanIn = 0 | <Wordpress_3,NotInstalled>_6, fanIn = 0 | <Wordpress_2,NotInstalled>_6, fanIn = 0 | <Wordpress_1,NotInstalled>_6, fanIn = 0 | <Varnish,NotInstalled>_6, fanIn = 0 | <Httpd,NotInstalled>_6, fanIn = 0 | <Sharing,Init>_6, fanIn = 0 | <Mysql,NotInstalled>_6, fanIn = 0 | <Wordpress_3,Template>_4, fanIn = 0 | <Wordpress_2,Template>_4, fanIn = 0 | <Wordpress_1,Template>_4, fanIn = 0 | <Httpd,Configured>_4, fanIn = 0 | <Mysql,SetRootPassword>_4, fanIn = 0 | <Mysql,ResetRootPassword>_4, fanIn = 0 | <Mysql,ConfiguredAsSlave>_2, fanIn = 0 | <Mysql,ConfiguredAsMaster>_2, fanIn = 0 | <Mysql,Active.ActiveOnMBS>_2, fanIn = 0 | <Wordpress_1,Configured>, fanIn = 0 | <Wordpress_2,Configured>, fanIn = 0 | <Wordpress_3,Configured>, fanIn = 0
Total requires: /mbs/Mysql/Active/addDatabase | /mbs/Mysql/Active/addDatabase | /mbs/Mysql/Active/addDatabase
fanIn[<Mysql,Active.ActiveOnMBS>_1] := 0
fanIn[<Mysql,ConfiguredAsMaster>_1] := 0
fanIn[<Mysql,ConfiguredAsSlave>_1] := 0
fanIn[<Mysql,ResetRootPassword>_3] := 0
fanIn[<Mysql,SetRootPassword>_3] := 0
fanIn[<Httpd,Configured>_3] := 0
fanIn[<Wordpress_1,Template>_3] := 0
fanIn[<Wordpress_2,Template>_3] := 0
fanIn[<Wordpress_3,Template>_3] := 0
fanIn[<Mysql,NotInstalled>_5] := 0
fanIn[<Sharing,Init>_5] := 0
fanIn[<Httpd,NotInstalled>_5] := 0
fanIn[<Varnish,NotInstalled>_5] := 0
fanIn[<Wordpress_1,NotInstalled>_5] := 0
fanIn[<Wordpress_2,NotInstalled>_5] := 0
fanIn[<Wordpress_3,NotInstalled>_5] := 0
fanIn[<Wordpress_3,Installed>_4] := 0
fanIn[<Wordpress_2,Installed>_4] := 0
fanIn[<Wordpress_1,Installed>_4] := 0
fanIn[<Varnish,Installed>_4] := 0
fanIn[<Httpd,Installed>_4] := 0
fanIn[<Mysql,Installed>_4] := 0
fanIn[<Httpd,Active>_2] := 0
fanIn[<Mysql,Configured>_2] := 0
fanIn[<Mysql,Active>] := 1
Nodes with fanIn values:
<Mysql,Active.ActiveOnMBS>_1, fanIn = 0 | <Mysql,ConfiguredAsMaster>_1, fanIn = 0 | <Mysql,ConfiguredAsSlave>_1, fanIn = 0 | <Mysql,ResetRootPassword>_3, fanIn = 0 | <Mysql,SetRootPassword>_3, fanIn = 0 | <Httpd,Configured>_3, fanIn = 0 | <Wordpress_1,Template>_3, fanIn = 0 | <Wordpress_2,Template>_3, fanIn = 0 | <Wordpress_3,Template>_3, fanIn = 0 | <Mysql,NotInstalled>_5, fanIn = 0 | <Sharing,Init>_5, fanIn = 0 | <Httpd,NotInstalled>_5, fanIn = 0 | <Varnish,NotInstalled>_5, fanIn = 0 | <Wordpress_1,NotInstalled>_5, fanIn = 0 | <Wordpress_2,NotInstalled>_5, fanIn = 0 | <Wordpress_3,NotInstalled>_5, fanIn = 0 | <Wordpress_3,Installed>_4, fanIn = 0 | <Wordpress_2,Installed>_4, fanIn = 0 | <Wordpress_1,Installed>_4, fanIn = 0 | <Varnish,Installed>_4, fanIn = 0 | <Httpd,Installed>_4, fanIn = 0 | <Mysql,Installed>_4, fanIn = 0 | <Httpd,Active>_2, fanIn = 0 | <Mysql,Configured>_2, fanIn = 0 | <Mysql,Active>, fanIn = 1

 ----------------- BOTTOM-UP VISIT LEVEL nr. 6 CYCLE execution nr. 1 ----------------
node to be examined: <Varnish,Installed>_5
<Varnish,Installed>_5 is NOT an initial node => need to look for parent
<Varnish,Installed>_4 chosen as a copy
origin node chosen: <Varnish,Installed>_4
current generation: Generation nr.6: <Varnish,Installed>_5
next working set, at level nr.5 : { <Varnish,Installed>_4  }
Nodes with fanIn values:
<Mysql,Active.ActiveOnMBS>_1, fanIn = 0 | <Mysql,ConfiguredAsMaster>_1, fanIn = 0 | <Mysql,ConfiguredAsSlave>_1, fanIn = 0 | <Mysql,ResetRootPassword>_3, fanIn = 0 | <Mysql,SetRootPassword>_3, fanIn = 0 | <Httpd,Configured>_3, fanIn = 0 | <Wordpress_1,Template>_3, fanIn = 0 | <Wordpress_2,Template>_3, fanIn = 0 | <Wordpress_3,Template>_3, fanIn = 0 | <Mysql,NotInstalled>_5, fanIn = 0 | <Sharing,Init>_5, fanIn = 0 | <Httpd,NotInstalled>_5, fanIn = 0 | <Varnish,NotInstalled>_5, fanIn = 0 | <Wordpress_1,NotInstalled>_5, fanIn = 0 | <Wordpress_2,NotInstalled>_5, fanIn = 0 | <Wordpress_3,NotInstalled>_5, fanIn = 0 | <Wordpress_3,Installed>_4, fanIn = 0 | <Wordpress_2,Installed>_4, fanIn = 0 | <Wordpress_1,Installed>_4, fanIn = 0 | <Varnish,Installed>_4, fanIn = 0 | <Httpd,Installed>_4, fanIn = 0 | <Mysql,Installed>_4, fanIn = 0 | <Httpd,Active>_2, fanIn = 0 | <Mysql,Configured>_2, fanIn = 0 | <Mysql,Active>, fanIn = 1

 ----------------- BOTTOM-UP VISIT LEVEL nr. 6 CYCLE execution nr. 2 ----------------
node to be examined: <Httpd,Active>_3
<Httpd,Active>_3 is NOT an initial node => need to look for parent
<Httpd,Active>_2 chosen as a copy
origin node chosen: <Httpd,Active>_2
current generation: Generation nr.6: <Httpd,Active>_3; <Varnish,Installed>_5
next working set, at level nr.5 : { <Httpd,Active>_2 <Varnish,Installed>_4  }
Nodes with fanIn values:
<Mysql,Active.ActiveOnMBS>_1, fanIn = 0 | <Mysql,ConfiguredAsMaster>_1, fanIn = 0 | <Mysql,ConfiguredAsSlave>_1, fanIn = 0 | <Mysql,ResetRootPassword>_3, fanIn = 0 | <Mysql,SetRootPassword>_3, fanIn = 0 | <Httpd,Configured>_3, fanIn = 0 | <Wordpress_1,Template>_3, fanIn = 0 | <Wordpress_2,Template>_3, fanIn = 0 | <Wordpress_3,Template>_3, fanIn = 0 | <Mysql,NotInstalled>_5, fanIn = 0 | <Sharing,Init>_5, fanIn = 0 | <Httpd,NotInstalled>_5, fanIn = 0 | <Varnish,NotInstalled>_5, fanIn = 0 | <Wordpress_1,NotInstalled>_5, fanIn = 0 | <Wordpress_2,NotInstalled>_5, fanIn = 0 | <Wordpress_3,NotInstalled>_5, fanIn = 0 | <Wordpress_3,Installed>_4, fanIn = 0 | <Wordpress_2,Installed>_4, fanIn = 0 | <Wordpress_1,Installed>_4, fanIn = 0 | <Varnish,Installed>_4, fanIn = 0 | <Httpd,Installed>_4, fanIn = 0 | <Mysql,Installed>_4, fanIn = 0 | <Httpd,Active>_2, fanIn = 0 | <Mysql,Configured>_2, fanIn = 0 | <Mysql,Active>, fanIn = 1

 ----------------- BOTTOM-UP VISIT LEVEL nr. 6 CYCLE execution nr. 3 ----------------
node to be examined: <Wordpress_3,Configured>
<Wordpress_3,Configured> is NOT an initial node => need to look for parent
<Wordpress_3,Template>_3 chosen with max fanIn value
origin node chosen: <Wordpress_3,Template>_3
<Wordpress_3,Configured> is NOT a copy => must take care of providers
<Mysql,Active> chosen with max fanIn value
Update fanIn : fanIn[<Mysql,Active>] <- 0 (due to provide Mysql.start)
list of chosen providers: <Mysql,Active> 
current generation: Generation nr.6: <Wordpress_3,Configured>; <Httpd,Active>_3; <Varnish,Installed>_5
next working set, at level nr.5 : { <Mysql,Active> <Wordpress_3,Template>_3 <Httpd,Active>_2 <Varnish,Installed>_4  }
Nodes with fanIn values:
<Mysql,Active.ActiveOnMBS>_1, fanIn = 0 | <Mysql,ConfiguredAsMaster>_1, fanIn = 0 | <Mysql,ConfiguredAsSlave>_1, fanIn = 0 | <Mysql,ResetRootPassword>_3, fanIn = 0 | <Mysql,SetRootPassword>_3, fanIn = 0 | <Httpd,Configured>_3, fanIn = 0 | <Wordpress_1,Template>_3, fanIn = 0 | <Wordpress_2,Template>_3, fanIn = 0 | <Wordpress_3,Template>_3, fanIn = 0 | <Mysql,NotInstalled>_5, fanIn = 0 | <Sharing,Init>_5, fanIn = 0 | <Httpd,NotInstalled>_5, fanIn = 0 | <Varnish,NotInstalled>_5, fanIn = 0 | <Wordpress_1,NotInstalled>_5, fanIn = 0 | <Wordpress_2,NotInstalled>_5, fanIn = 0 | <Wordpress_3,NotInstalled>_5, fanIn = 0 | <Wordpress_3,Installed>_4, fanIn = 0 | <Wordpress_2,Installed>_4, fanIn = 0 | <Wordpress_1,Installed>_4, fanIn = 0 | <Varnish,Installed>_4, fanIn = 0 | <Httpd,Installed>_4, fanIn = 0 | <Mysql,Installed>_4, fanIn = 0 | <Httpd,Active>_2, fanIn = 0 | <Mysql,Configured>_2, fanIn = 0 | <Mysql,Active>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 6 CYCLE execution nr. 4 ----------------
node to be examined: <Wordpress_2,Configured>
<Wordpress_2,Configured> is NOT an initial node => need to look for parent
<Wordpress_2,Template>_3 chosen with max fanIn value
origin node chosen: <Wordpress_2,Template>_3
<Wordpress_2,Configured> is NOT a copy => must take care of providers
<Mysql,Active> chosen with max fanIn value
list of chosen providers: <Mysql,Active> 
current generation: Generation nr.6: <Wordpress_2,Configured>; <Wordpress_3,Configured>; <Httpd,Active>_3; <Varnish,Installed>_5
next working set, at level nr.5 : { <Mysql,Active> <Wordpress_2,Template>_3 <Wordpress_3,Template>_3 <Httpd,Active>_2 <Varnish,Installed>_4  }
Nodes with fanIn values:
<Mysql,Active.ActiveOnMBS>_1, fanIn = 0 | <Mysql,ConfiguredAsMaster>_1, fanIn = 0 | <Mysql,ConfiguredAsSlave>_1, fanIn = 0 | <Mysql,ResetRootPassword>_3, fanIn = 0 | <Mysql,SetRootPassword>_3, fanIn = 0 | <Httpd,Configured>_3, fanIn = 0 | <Wordpress_1,Template>_3, fanIn = 0 | <Wordpress_2,Template>_3, fanIn = 0 | <Wordpress_3,Template>_3, fanIn = 0 | <Mysql,NotInstalled>_5, fanIn = 0 | <Sharing,Init>_5, fanIn = 0 | <Httpd,NotInstalled>_5, fanIn = 0 | <Varnish,NotInstalled>_5, fanIn = 0 | <Wordpress_1,NotInstalled>_5, fanIn = 0 | <Wordpress_2,NotInstalled>_5, fanIn = 0 | <Wordpress_3,NotInstalled>_5, fanIn = 0 | <Wordpress_3,Installed>_4, fanIn = 0 | <Wordpress_2,Installed>_4, fanIn = 0 | <Wordpress_1,Installed>_4, fanIn = 0 | <Varnish,Installed>_4, fanIn = 0 | <Httpd,Installed>_4, fanIn = 0 | <Mysql,Installed>_4, fanIn = 0 | <Httpd,Active>_2, fanIn = 0 | <Mysql,Configured>_2, fanIn = 0 | <Mysql,Active>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 6 CYCLE execution nr. 5 ----------------
node to be examined: <Wordpress_1,Configured>
<Wordpress_1,Configured> is NOT an initial node => need to look for parent
<Wordpress_1,Template>_3 chosen with max fanIn value
origin node chosen: <Wordpress_1,Template>_3
<Wordpress_1,Configured> is NOT a copy => must take care of providers
<Mysql,Active> chosen with max fanIn value
list of chosen providers: <Mysql,Active> 
current generation: Generation nr.6: <Wordpress_1,Configured>; <Wordpress_2,Configured>; <Wordpress_3,Configured>; <Httpd,Active>_3; <Varnish,Installed>_5
next working set, at level nr.5 : { <Mysql,Active> <Wordpress_1,Template>_3 <Wordpress_2,Template>_3 <Wordpress_3,Template>_3 <Httpd,Active>_2 <Varnish,Installed>_4  }
Nodes with fanIn values:
<Mysql,Active.ActiveOnMBS>_1, fanIn = 0 | <Mysql,ConfiguredAsMaster>_1, fanIn = 0 | <Mysql,ConfiguredAsSlave>_1, fanIn = 0 | <Mysql,ResetRootPassword>_3, fanIn = 0 | <Mysql,SetRootPassword>_3, fanIn = 0 | <Httpd,Configured>_3, fanIn = 0 | <Wordpress_1,Template>_3, fanIn = 0 | <Wordpress_2,Template>_3, fanIn = 0 | <Wordpress_3,Template>_3, fanIn = 0 | <Mysql,NotInstalled>_5, fanIn = 0 | <Sharing,Init>_5, fanIn = 0 | <Httpd,NotInstalled>_5, fanIn = 0 | <Varnish,NotInstalled>_5, fanIn = 0 | <Wordpress_1,NotInstalled>_5, fanIn = 0 | <Wordpress_2,NotInstalled>_5, fanIn = 0 | <Wordpress_3,NotInstalled>_5, fanIn = 0 | <Wordpress_3,Installed>_4, fanIn = 0 | <Wordpress_2,Installed>_4, fanIn = 0 | <Wordpress_1,Installed>_4, fanIn = 0 | <Varnish,Installed>_4, fanIn = 0 | <Httpd,Installed>_4, fanIn = 0 | <Mysql,Installed>_4, fanIn = 0 | <Httpd,Active>_2, fanIn = 0 | <Mysql,Configured>_2, fanIn = 0 | <Mysql,Active>, fanIn = 0
Total requires: 
fanIn[<Mysql,Configured>_1] := 0
fanIn[<Httpd,Active>_1] := 0
fanIn[<Mysql,Installed>_3] := 0
fanIn[<Httpd,Installed>_3] := 0
fanIn[<Varnish,Installed>_3] := 0
fanIn[<Wordpress_1,Installed>_3] := 0
fanIn[<Wordpress_2,Installed>_3] := 0
fanIn[<Wordpress_3,Installed>_3] := 0
fanIn[<Wordpress_3,NotInstalled>_4] := 0
fanIn[<Wordpress_2,NotInstalled>_4] := 0
fanIn[<Wordpress_1,NotInstalled>_4] := 0
fanIn[<Varnish,NotInstalled>_4] := 0
fanIn[<Httpd,NotInstalled>_4] := 0
fanIn[<Sharing,Init>_4] := 0
fanIn[<Mysql,NotInstalled>_4] := 0
fanIn[<Wordpress_3,Template>_2] := 0
fanIn[<Wordpress_2,Template>_2] := 0
fanIn[<Wordpress_1,Template>_2] := 0
fanIn[<Httpd,Configured>_2] := 0
fanIn[<Mysql,SetRootPassword>_2] := 0
fanIn[<Mysql,ResetRootPassword>_2] := 0
fanIn[<Mysql,ConfiguredAsSlave>] := 0
fanIn[<Mysql,ConfiguredAsMaster>] := 0
fanIn[<Mysql,Active.ActiveOnMBS>] := 0
Nodes with fanIn values:
<Mysql,Configured>_1, fanIn = 0 | <Httpd,Active>_1, fanIn = 0 | <Mysql,Installed>_3, fanIn = 0 | <Httpd,Installed>_3, fanIn = 0 | <Varnish,Installed>_3, fanIn = 0 | <Wordpress_1,Installed>_3, fanIn = 0 | <Wordpress_2,Installed>_3, fanIn = 0 | <Wordpress_3,Installed>_3, fanIn = 0 | <Wordpress_3,NotInstalled>_4, fanIn = 0 | <Wordpress_2,NotInstalled>_4, fanIn = 0 | <Wordpress_1,NotInstalled>_4, fanIn = 0 | <Varnish,NotInstalled>_4, fanIn = 0 | <Httpd,NotInstalled>_4, fanIn = 0 | <Sharing,Init>_4, fanIn = 0 | <Mysql,NotInstalled>_4, fanIn = 0 | <Wordpress_3,Template>_2, fanIn = 0 | <Wordpress_2,Template>_2, fanIn = 0 | <Wordpress_1,Template>_2, fanIn = 0 | <Httpd,Configured>_2, fanIn = 0 | <Mysql,SetRootPassword>_2, fanIn = 0 | <Mysql,ResetRootPassword>_2, fanIn = 0 | <Mysql,ConfiguredAsSlave>, fanIn = 0 | <Mysql,ConfiguredAsMaster>, fanIn = 0 | <Mysql,Active.ActiveOnMBS>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 5 CYCLE execution nr. 1 ----------------
node to be examined: <Mysql,Active>
<Mysql,Active> is NOT an initial node => need to look for parent
<Mysql,Active.ActiveOnMBS> chosen with max fanIn value
origin node chosen: <Mysql,Active.ActiveOnMBS>
<Mysql,Active> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.5: <Mysql,Active>
next working set, at level nr.4 : { <Mysql,Active.ActiveOnMBS>  }
Nodes with fanIn values:
<Mysql,Configured>_1, fanIn = 0 | <Httpd,Active>_1, fanIn = 0 | <Mysql,Installed>_3, fanIn = 0 | <Httpd,Installed>_3, fanIn = 0 | <Varnish,Installed>_3, fanIn = 0 | <Wordpress_1,Installed>_3, fanIn = 0 | <Wordpress_2,Installed>_3, fanIn = 0 | <Wordpress_3,Installed>_3, fanIn = 0 | <Wordpress_3,NotInstalled>_4, fanIn = 0 | <Wordpress_2,NotInstalled>_4, fanIn = 0 | <Wordpress_1,NotInstalled>_4, fanIn = 0 | <Varnish,NotInstalled>_4, fanIn = 0 | <Httpd,NotInstalled>_4, fanIn = 0 | <Sharing,Init>_4, fanIn = 0 | <Mysql,NotInstalled>_4, fanIn = 0 | <Wordpress_3,Template>_2, fanIn = 0 | <Wordpress_2,Template>_2, fanIn = 0 | <Wordpress_1,Template>_2, fanIn = 0 | <Httpd,Configured>_2, fanIn = 0 | <Mysql,SetRootPassword>_2, fanIn = 0 | <Mysql,ResetRootPassword>_2, fanIn = 0 | <Mysql,ConfiguredAsSlave>, fanIn = 0 | <Mysql,ConfiguredAsMaster>, fanIn = 0 | <Mysql,Active.ActiveOnMBS>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 5 CYCLE execution nr. 2 ----------------
node to be examined: <Wordpress_1,Template>_3
<Wordpress_1,Template>_3 is NOT an initial node => need to look for parent
<Wordpress_1,Template>_2 chosen as a copy
origin node chosen: <Wordpress_1,Template>_2
current generation: Generation nr.5: <Wordpress_1,Template>_3; <Mysql,Active>
next working set, at level nr.4 : { <Wordpress_1,Template>_2 <Mysql,Active.ActiveOnMBS>  }
Nodes with fanIn values:
<Mysql,Configured>_1, fanIn = 0 | <Httpd,Active>_1, fanIn = 0 | <Mysql,Installed>_3, fanIn = 0 | <Httpd,Installed>_3, fanIn = 0 | <Varnish,Installed>_3, fanIn = 0 | <Wordpress_1,Installed>_3, fanIn = 0 | <Wordpress_2,Installed>_3, fanIn = 0 | <Wordpress_3,Installed>_3, fanIn = 0 | <Wordpress_3,NotInstalled>_4, fanIn = 0 | <Wordpress_2,NotInstalled>_4, fanIn = 0 | <Wordpress_1,NotInstalled>_4, fanIn = 0 | <Varnish,NotInstalled>_4, fanIn = 0 | <Httpd,NotInstalled>_4, fanIn = 0 | <Sharing,Init>_4, fanIn = 0 | <Mysql,NotInstalled>_4, fanIn = 0 | <Wordpress_3,Template>_2, fanIn = 0 | <Wordpress_2,Template>_2, fanIn = 0 | <Wordpress_1,Template>_2, fanIn = 0 | <Httpd,Configured>_2, fanIn = 0 | <Mysql,SetRootPassword>_2, fanIn = 0 | <Mysql,ResetRootPassword>_2, fanIn = 0 | <Mysql,ConfiguredAsSlave>, fanIn = 0 | <Mysql,ConfiguredAsMaster>, fanIn = 0 | <Mysql,Active.ActiveOnMBS>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 5 CYCLE execution nr. 3 ----------------
node to be examined: <Wordpress_2,Template>_3
<Wordpress_2,Template>_3 is NOT an initial node => need to look for parent
<Wordpress_2,Template>_2 chosen as a copy
origin node chosen: <Wordpress_2,Template>_2
current generation: Generation nr.5: <Wordpress_2,Template>_3; <Wordpress_1,Template>_3; <Mysql,Active>
next working set, at level nr.4 : { <Wordpress_2,Template>_2 <Wordpress_1,Template>_2 <Mysql,Active.ActiveOnMBS>  }
Nodes with fanIn values:
<Mysql,Configured>_1, fanIn = 0 | <Httpd,Active>_1, fanIn = 0 | <Mysql,Installed>_3, fanIn = 0 | <Httpd,Installed>_3, fanIn = 0 | <Varnish,Installed>_3, fanIn = 0 | <Wordpress_1,Installed>_3, fanIn = 0 | <Wordpress_2,Installed>_3, fanIn = 0 | <Wordpress_3,Installed>_3, fanIn = 0 | <Wordpress_3,NotInstalled>_4, fanIn = 0 | <Wordpress_2,NotInstalled>_4, fanIn = 0 | <Wordpress_1,NotInstalled>_4, fanIn = 0 | <Varnish,NotInstalled>_4, fanIn = 0 | <Httpd,NotInstalled>_4, fanIn = 0 | <Sharing,Init>_4, fanIn = 0 | <Mysql,NotInstalled>_4, fanIn = 0 | <Wordpress_3,Template>_2, fanIn = 0 | <Wordpress_2,Template>_2, fanIn = 0 | <Wordpress_1,Template>_2, fanIn = 0 | <Httpd,Configured>_2, fanIn = 0 | <Mysql,SetRootPassword>_2, fanIn = 0 | <Mysql,ResetRootPassword>_2, fanIn = 0 | <Mysql,ConfiguredAsSlave>, fanIn = 0 | <Mysql,ConfiguredAsMaster>, fanIn = 0 | <Mysql,Active.ActiveOnMBS>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 5 CYCLE execution nr. 4 ----------------
node to be examined: <Wordpress_3,Template>_3
<Wordpress_3,Template>_3 is NOT an initial node => need to look for parent
<Wordpress_3,Template>_2 chosen as a copy
origin node chosen: <Wordpress_3,Template>_2
current generation: Generation nr.5: <Wordpress_3,Template>_3; <Wordpress_2,Template>_3; <Wordpress_1,Template>_3; <Mysql,Active>
next working set, at level nr.4 : { <Wordpress_3,Template>_2 <Wordpress_2,Template>_2 <Wordpress_1,Template>_2 <Mysql,Active.ActiveOnMBS>  }
Nodes with fanIn values:
<Mysql,Configured>_1, fanIn = 0 | <Httpd,Active>_1, fanIn = 0 | <Mysql,Installed>_3, fanIn = 0 | <Httpd,Installed>_3, fanIn = 0 | <Varnish,Installed>_3, fanIn = 0 | <Wordpress_1,Installed>_3, fanIn = 0 | <Wordpress_2,Installed>_3, fanIn = 0 | <Wordpress_3,Installed>_3, fanIn = 0 | <Wordpress_3,NotInstalled>_4, fanIn = 0 | <Wordpress_2,NotInstalled>_4, fanIn = 0 | <Wordpress_1,NotInstalled>_4, fanIn = 0 | <Varnish,NotInstalled>_4, fanIn = 0 | <Httpd,NotInstalled>_4, fanIn = 0 | <Sharing,Init>_4, fanIn = 0 | <Mysql,NotInstalled>_4, fanIn = 0 | <Wordpress_3,Template>_2, fanIn = 0 | <Wordpress_2,Template>_2, fanIn = 0 | <Wordpress_1,Template>_2, fanIn = 0 | <Httpd,Configured>_2, fanIn = 0 | <Mysql,SetRootPassword>_2, fanIn = 0 | <Mysql,ResetRootPassword>_2, fanIn = 0 | <Mysql,ConfiguredAsSlave>, fanIn = 0 | <Mysql,ConfiguredAsMaster>, fanIn = 0 | <Mysql,Active.ActiveOnMBS>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 5 CYCLE execution nr. 5 ----------------
node to be examined: <Httpd,Active>_2
<Httpd,Active>_2 is NOT an initial node => need to look for parent
<Httpd,Active>_1 chosen as a copy
origin node chosen: <Httpd,Active>_1
current generation: Generation nr.5: <Httpd,Active>_2; <Wordpress_3,Template>_3; <Wordpress_2,Template>_3; <Wordpress_1,Template>_3; <Mysql,Active>
next working set, at level nr.4 : { <Httpd,Active>_1 <Wordpress_3,Template>_2 <Wordpress_2,Template>_2 <Wordpress_1,Template>_2 <Mysql,Active.ActiveOnMBS>  }
Nodes with fanIn values:
<Mysql,Configured>_1, fanIn = 0 | <Httpd,Active>_1, fanIn = 0 | <Mysql,Installed>_3, fanIn = 0 | <Httpd,Installed>_3, fanIn = 0 | <Varnish,Installed>_3, fanIn = 0 | <Wordpress_1,Installed>_3, fanIn = 0 | <Wordpress_2,Installed>_3, fanIn = 0 | <Wordpress_3,Installed>_3, fanIn = 0 | <Wordpress_3,NotInstalled>_4, fanIn = 0 | <Wordpress_2,NotInstalled>_4, fanIn = 0 | <Wordpress_1,NotInstalled>_4, fanIn = 0 | <Varnish,NotInstalled>_4, fanIn = 0 | <Httpd,NotInstalled>_4, fanIn = 0 | <Sharing,Init>_4, fanIn = 0 | <Mysql,NotInstalled>_4, fanIn = 0 | <Wordpress_3,Template>_2, fanIn = 0 | <Wordpress_2,Template>_2, fanIn = 0 | <Wordpress_1,Template>_2, fanIn = 0 | <Httpd,Configured>_2, fanIn = 0 | <Mysql,SetRootPassword>_2, fanIn = 0 | <Mysql,ResetRootPassword>_2, fanIn = 0 | <Mysql,ConfiguredAsSlave>, fanIn = 0 | <Mysql,ConfiguredAsMaster>, fanIn = 0 | <Mysql,Active.ActiveOnMBS>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 5 CYCLE execution nr. 6 ----------------
node to be examined: <Varnish,Installed>_4
<Varnish,Installed>_4 is NOT an initial node => need to look for parent
<Varnish,Installed>_3 chosen as a copy
origin node chosen: <Varnish,Installed>_3
current generation: Generation nr.5: <Varnish,Installed>_4; <Httpd,Active>_2; <Wordpress_3,Template>_3; <Wordpress_2,Template>_3; <Wordpress_1,Template>_3; <Mysql,Active>
next working set, at level nr.4 : { <Varnish,Installed>_3 <Httpd,Active>_1 <Wordpress_3,Template>_2 <Wordpress_2,Template>_2 <Wordpress_1,Template>_2 <Mysql,Active.ActiveOnMBS>  }
Nodes with fanIn values:
<Mysql,Configured>_1, fanIn = 0 | <Httpd,Active>_1, fanIn = 0 | <Mysql,Installed>_3, fanIn = 0 | <Httpd,Installed>_3, fanIn = 0 | <Varnish,Installed>_3, fanIn = 0 | <Wordpress_1,Installed>_3, fanIn = 0 | <Wordpress_2,Installed>_3, fanIn = 0 | <Wordpress_3,Installed>_3, fanIn = 0 | <Wordpress_3,NotInstalled>_4, fanIn = 0 | <Wordpress_2,NotInstalled>_4, fanIn = 0 | <Wordpress_1,NotInstalled>_4, fanIn = 0 | <Varnish,NotInstalled>_4, fanIn = 0 | <Httpd,NotInstalled>_4, fanIn = 0 | <Sharing,Init>_4, fanIn = 0 | <Mysql,NotInstalled>_4, fanIn = 0 | <Wordpress_3,Template>_2, fanIn = 0 | <Wordpress_2,Template>_2, fanIn = 0 | <Wordpress_1,Template>_2, fanIn = 0 | <Httpd,Configured>_2, fanIn = 0 | <Mysql,SetRootPassword>_2, fanIn = 0 | <Mysql,ResetRootPassword>_2, fanIn = 0 | <Mysql,ConfiguredAsSlave>, fanIn = 0 | <Mysql,ConfiguredAsMaster>, fanIn = 0 | <Mysql,Active.ActiveOnMBS>, fanIn = 0
Total requires: 
fanIn[<Mysql,ResetRootPassword>_1] := 0
fanIn[<Mysql,SetRootPassword>_1] := 0
fanIn[<Httpd,Configured>_1] := 0
fanIn[<Wordpress_1,Template>_1] := 0
fanIn[<Wordpress_2,Template>_1] := 0
fanIn[<Wordpress_3,Template>_1] := 0
fanIn[<Mysql,NotInstalled>_3] := 0
fanIn[<Sharing,Init>_3] := 0
fanIn[<Httpd,NotInstalled>_3] := 0
fanIn[<Varnish,NotInstalled>_3] := 0
fanIn[<Wordpress_1,NotInstalled>_3] := 0
fanIn[<Wordpress_2,NotInstalled>_3] := 0
fanIn[<Wordpress_3,NotInstalled>_3] := 0
fanIn[<Wordpress_3,Installed>_2] := 0
fanIn[<Wordpress_2,Installed>_2] := 0
fanIn[<Wordpress_1,Installed>_2] := 0
fanIn[<Varnish,Installed>_2] := 0
fanIn[<Httpd,Installed>_2] := 0
fanIn[<Mysql,Installed>_2] := 0
fanIn[<Httpd,Active>] := 0
fanIn[<Mysql,Configured>] := 0
Nodes with fanIn values:
<Mysql,ResetRootPassword>_1, fanIn = 0 | <Mysql,SetRootPassword>_1, fanIn = 0 | <Httpd,Configured>_1, fanIn = 0 | <Wordpress_1,Template>_1, fanIn = 0 | <Wordpress_2,Template>_1, fanIn = 0 | <Wordpress_3,Template>_1, fanIn = 0 | <Mysql,NotInstalled>_3, fanIn = 0 | <Sharing,Init>_3, fanIn = 0 | <Httpd,NotInstalled>_3, fanIn = 0 | <Varnish,NotInstalled>_3, fanIn = 0 | <Wordpress_1,NotInstalled>_3, fanIn = 0 | <Wordpress_2,NotInstalled>_3, fanIn = 0 | <Wordpress_3,NotInstalled>_3, fanIn = 0 | <Wordpress_3,Installed>_2, fanIn = 0 | <Wordpress_2,Installed>_2, fanIn = 0 | <Wordpress_1,Installed>_2, fanIn = 0 | <Varnish,Installed>_2, fanIn = 0 | <Httpd,Installed>_2, fanIn = 0 | <Mysql,Installed>_2, fanIn = 0 | <Httpd,Active>, fanIn = 0 | <Mysql,Configured>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 4 CYCLE execution nr. 1 ----------------
node to be examined: <Varnish,Installed>_3
<Varnish,Installed>_3 is NOT an initial node => need to look for parent
<Varnish,Installed>_2 chosen as a copy
origin node chosen: <Varnish,Installed>_2
current generation: Generation nr.4: <Varnish,Installed>_3
next working set, at level nr.3 : { <Varnish,Installed>_2  }
Nodes with fanIn values:
<Mysql,ResetRootPassword>_1, fanIn = 0 | <Mysql,SetRootPassword>_1, fanIn = 0 | <Httpd,Configured>_1, fanIn = 0 | <Wordpress_1,Template>_1, fanIn = 0 | <Wordpress_2,Template>_1, fanIn = 0 | <Wordpress_3,Template>_1, fanIn = 0 | <Mysql,NotInstalled>_3, fanIn = 0 | <Sharing,Init>_3, fanIn = 0 | <Httpd,NotInstalled>_3, fanIn = 0 | <Varnish,NotInstalled>_3, fanIn = 0 | <Wordpress_1,NotInstalled>_3, fanIn = 0 | <Wordpress_2,NotInstalled>_3, fanIn = 0 | <Wordpress_3,NotInstalled>_3, fanIn = 0 | <Wordpress_3,Installed>_2, fanIn = 0 | <Wordpress_2,Installed>_2, fanIn = 0 | <Wordpress_1,Installed>_2, fanIn = 0 | <Varnish,Installed>_2, fanIn = 0 | <Httpd,Installed>_2, fanIn = 0 | <Mysql,Installed>_2, fanIn = 0 | <Httpd,Active>, fanIn = 0 | <Mysql,Configured>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 4 CYCLE execution nr. 2 ----------------
node to be examined: <Httpd,Active>_1
<Httpd,Active>_1 is NOT an initial node => need to look for parent
<Httpd,Active> chosen as a copy
origin node chosen: <Httpd,Active>
current generation: Generation nr.4: <Httpd,Active>_1; <Varnish,Installed>_3
next working set, at level nr.3 : { <Httpd,Active> <Varnish,Installed>_2  }
Nodes with fanIn values:
<Mysql,ResetRootPassword>_1, fanIn = 0 | <Mysql,SetRootPassword>_1, fanIn = 0 | <Httpd,Configured>_1, fanIn = 0 | <Wordpress_1,Template>_1, fanIn = 0 | <Wordpress_2,Template>_1, fanIn = 0 | <Wordpress_3,Template>_1, fanIn = 0 | <Mysql,NotInstalled>_3, fanIn = 0 | <Sharing,Init>_3, fanIn = 0 | <Httpd,NotInstalled>_3, fanIn = 0 | <Varnish,NotInstalled>_3, fanIn = 0 | <Wordpress_1,NotInstalled>_3, fanIn = 0 | <Wordpress_2,NotInstalled>_3, fanIn = 0 | <Wordpress_3,NotInstalled>_3, fanIn = 0 | <Wordpress_3,Installed>_2, fanIn = 0 | <Wordpress_2,Installed>_2, fanIn = 0 | <Wordpress_1,Installed>_2, fanIn = 0 | <Varnish,Installed>_2, fanIn = 0 | <Httpd,Installed>_2, fanIn = 0 | <Mysql,Installed>_2, fanIn = 0 | <Httpd,Active>, fanIn = 0 | <Mysql,Configured>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 4 CYCLE execution nr. 3 ----------------
node to be examined: <Wordpress_3,Template>_2
<Wordpress_3,Template>_2 is NOT an initial node => need to look for parent
<Wordpress_3,Template>_1 chosen as a copy
origin node chosen: <Wordpress_3,Template>_1
current generation: Generation nr.4: <Wordpress_3,Template>_2; <Httpd,Active>_1; <Varnish,Installed>_3
next working set, at level nr.3 : { <Wordpress_3,Template>_1 <Httpd,Active> <Varnish,Installed>_2  }
Nodes with fanIn values:
<Mysql,ResetRootPassword>_1, fanIn = 0 | <Mysql,SetRootPassword>_1, fanIn = 0 | <Httpd,Configured>_1, fanIn = 0 | <Wordpress_1,Template>_1, fanIn = 0 | <Wordpress_2,Template>_1, fanIn = 0 | <Wordpress_3,Template>_1, fanIn = 0 | <Mysql,NotInstalled>_3, fanIn = 0 | <Sharing,Init>_3, fanIn = 0 | <Httpd,NotInstalled>_3, fanIn = 0 | <Varnish,NotInstalled>_3, fanIn = 0 | <Wordpress_1,NotInstalled>_3, fanIn = 0 | <Wordpress_2,NotInstalled>_3, fanIn = 0 | <Wordpress_3,NotInstalled>_3, fanIn = 0 | <Wordpress_3,Installed>_2, fanIn = 0 | <Wordpress_2,Installed>_2, fanIn = 0 | <Wordpress_1,Installed>_2, fanIn = 0 | <Varnish,Installed>_2, fanIn = 0 | <Httpd,Installed>_2, fanIn = 0 | <Mysql,Installed>_2, fanIn = 0 | <Httpd,Active>, fanIn = 0 | <Mysql,Configured>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 4 CYCLE execution nr. 4 ----------------
node to be examined: <Wordpress_2,Template>_2
<Wordpress_2,Template>_2 is NOT an initial node => need to look for parent
<Wordpress_2,Template>_1 chosen as a copy
origin node chosen: <Wordpress_2,Template>_1
current generation: Generation nr.4: <Wordpress_2,Template>_2; <Wordpress_3,Template>_2; <Httpd,Active>_1; <Varnish,Installed>_3
next working set, at level nr.3 : { <Wordpress_2,Template>_1 <Wordpress_3,Template>_1 <Httpd,Active> <Varnish,Installed>_2  }
Nodes with fanIn values:
<Mysql,ResetRootPassword>_1, fanIn = 0 | <Mysql,SetRootPassword>_1, fanIn = 0 | <Httpd,Configured>_1, fanIn = 0 | <Wordpress_1,Template>_1, fanIn = 0 | <Wordpress_2,Template>_1, fanIn = 0 | <Wordpress_3,Template>_1, fanIn = 0 | <Mysql,NotInstalled>_3, fanIn = 0 | <Sharing,Init>_3, fanIn = 0 | <Httpd,NotInstalled>_3, fanIn = 0 | <Varnish,NotInstalled>_3, fanIn = 0 | <Wordpress_1,NotInstalled>_3, fanIn = 0 | <Wordpress_2,NotInstalled>_3, fanIn = 0 | <Wordpress_3,NotInstalled>_3, fanIn = 0 | <Wordpress_3,Installed>_2, fanIn = 0 | <Wordpress_2,Installed>_2, fanIn = 0 | <Wordpress_1,Installed>_2, fanIn = 0 | <Varnish,Installed>_2, fanIn = 0 | <Httpd,Installed>_2, fanIn = 0 | <Mysql,Installed>_2, fanIn = 0 | <Httpd,Active>, fanIn = 0 | <Mysql,Configured>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 4 CYCLE execution nr. 5 ----------------
node to be examined: <Wordpress_1,Template>_2
<Wordpress_1,Template>_2 is NOT an initial node => need to look for parent
<Wordpress_1,Template>_1 chosen as a copy
origin node chosen: <Wordpress_1,Template>_1
current generation: Generation nr.4: <Wordpress_1,Template>_2; <Wordpress_2,Template>_2; <Wordpress_3,Template>_2; <Httpd,Active>_1; <Varnish,Installed>_3
next working set, at level nr.3 : { <Wordpress_1,Template>_1 <Wordpress_2,Template>_1 <Wordpress_3,Template>_1 <Httpd,Active> <Varnish,Installed>_2  }
Nodes with fanIn values:
<Mysql,ResetRootPassword>_1, fanIn = 0 | <Mysql,SetRootPassword>_1, fanIn = 0 | <Httpd,Configured>_1, fanIn = 0 | <Wordpress_1,Template>_1, fanIn = 0 | <Wordpress_2,Template>_1, fanIn = 0 | <Wordpress_3,Template>_1, fanIn = 0 | <Mysql,NotInstalled>_3, fanIn = 0 | <Sharing,Init>_3, fanIn = 0 | <Httpd,NotInstalled>_3, fanIn = 0 | <Varnish,NotInstalled>_3, fanIn = 0 | <Wordpress_1,NotInstalled>_3, fanIn = 0 | <Wordpress_2,NotInstalled>_3, fanIn = 0 | <Wordpress_3,NotInstalled>_3, fanIn = 0 | <Wordpress_3,Installed>_2, fanIn = 0 | <Wordpress_2,Installed>_2, fanIn = 0 | <Wordpress_1,Installed>_2, fanIn = 0 | <Varnish,Installed>_2, fanIn = 0 | <Httpd,Installed>_2, fanIn = 0 | <Mysql,Installed>_2, fanIn = 0 | <Httpd,Active>, fanIn = 0 | <Mysql,Configured>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 4 CYCLE execution nr. 6 ----------------
node to be examined: <Mysql,Active.ActiveOnMBS>
<Mysql,Active.ActiveOnMBS> is NOT an initial node => need to look for parent
<Mysql,Configured> chosen with max fanIn value
origin node chosen: <Mysql,Configured>
<Mysql,Active.ActiveOnMBS> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.4: <Mysql,Active.ActiveOnMBS>; <Wordpress_1,Template>_2; <Wordpress_2,Template>_2; <Wordpress_3,Template>_2; <Httpd,Active>_1; <Varnish,Installed>_3
next working set, at level nr.3 : { <Mysql,Configured> <Wordpress_1,Template>_1 <Wordpress_2,Template>_1 <Wordpress_3,Template>_1 <Httpd,Active> <Varnish,Installed>_2  }
Nodes with fanIn values:
<Mysql,ResetRootPassword>_1, fanIn = 0 | <Mysql,SetRootPassword>_1, fanIn = 0 | <Httpd,Configured>_1, fanIn = 0 | <Wordpress_1,Template>_1, fanIn = 0 | <Wordpress_2,Template>_1, fanIn = 0 | <Wordpress_3,Template>_1, fanIn = 0 | <Mysql,NotInstalled>_3, fanIn = 0 | <Sharing,Init>_3, fanIn = 0 | <Httpd,NotInstalled>_3, fanIn = 0 | <Varnish,NotInstalled>_3, fanIn = 0 | <Wordpress_1,NotInstalled>_3, fanIn = 0 | <Wordpress_2,NotInstalled>_3, fanIn = 0 | <Wordpress_3,NotInstalled>_3, fanIn = 0 | <Wordpress_3,Installed>_2, fanIn = 0 | <Wordpress_2,Installed>_2, fanIn = 0 | <Wordpress_1,Installed>_2, fanIn = 0 | <Varnish,Installed>_2, fanIn = 0 | <Httpd,Installed>_2, fanIn = 0 | <Mysql,Installed>_2, fanIn = 0 | <Httpd,Active>, fanIn = 0 | <Mysql,Configured>, fanIn = 0
Total requires: 
fanIn[<Mysql,Installed>_1] := 0
fanIn[<Httpd,Installed>_1] := 0
fanIn[<Varnish,Installed>_1] := 0
fanIn[<Wordpress_1,Installed>_1] := 0
fanIn[<Wordpress_2,Installed>_1] := 0
fanIn[<Wordpress_3,Installed>_1] := 0
fanIn[<Wordpress_3,NotInstalled>_2] := 0
fanIn[<Wordpress_2,NotInstalled>_2] := 0
fanIn[<Wordpress_1,NotInstalled>_2] := 0
fanIn[<Varnish,NotInstalled>_2] := 0
fanIn[<Httpd,NotInstalled>_2] := 0
fanIn[<Sharing,Init>_2] := 0
fanIn[<Mysql,NotInstalled>_2] := 0
fanIn[<Wordpress_3,Template>] := 0
fanIn[<Wordpress_2,Template>] := 0
fanIn[<Wordpress_1,Template>] := 0
fanIn[<Httpd,Configured>] := 0
fanIn[<Mysql,SetRootPassword>] := 0
fanIn[<Mysql,ResetRootPassword>] := 0
Nodes with fanIn values:
<Mysql,Installed>_1, fanIn = 0 | <Httpd,Installed>_1, fanIn = 0 | <Varnish,Installed>_1, fanIn = 0 | <Wordpress_1,Installed>_1, fanIn = 0 | <Wordpress_2,Installed>_1, fanIn = 0 | <Wordpress_3,Installed>_1, fanIn = 0 | <Wordpress_3,NotInstalled>_2, fanIn = 0 | <Wordpress_2,NotInstalled>_2, fanIn = 0 | <Wordpress_1,NotInstalled>_2, fanIn = 0 | <Varnish,NotInstalled>_2, fanIn = 0 | <Httpd,NotInstalled>_2, fanIn = 0 | <Sharing,Init>_2, fanIn = 0 | <Mysql,NotInstalled>_2, fanIn = 0 | <Wordpress_3,Template>, fanIn = 0 | <Wordpress_2,Template>, fanIn = 0 | <Wordpress_1,Template>, fanIn = 0 | <Httpd,Configured>, fanIn = 0 | <Mysql,SetRootPassword>, fanIn = 0 | <Mysql,ResetRootPassword>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 3 CYCLE execution nr. 1 ----------------
node to be examined: <Mysql,Configured>
<Mysql,Configured> is NOT an initial node => need to look for parent
<Mysql,SetRootPassword> chosen with max fanIn value
origin node chosen: <Mysql,SetRootPassword>
<Mysql,Configured> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.3: <Mysql,Configured>
next working set, at level nr.2 : { <Mysql,SetRootPassword>  }
Nodes with fanIn values:
<Mysql,Installed>_1, fanIn = 0 | <Httpd,Installed>_1, fanIn = 0 | <Varnish,Installed>_1, fanIn = 0 | <Wordpress_1,Installed>_1, fanIn = 0 | <Wordpress_2,Installed>_1, fanIn = 0 | <Wordpress_3,Installed>_1, fanIn = 0 | <Wordpress_3,NotInstalled>_2, fanIn = 0 | <Wordpress_2,NotInstalled>_2, fanIn = 0 | <Wordpress_1,NotInstalled>_2, fanIn = 0 | <Varnish,NotInstalled>_2, fanIn = 0 | <Httpd,NotInstalled>_2, fanIn = 0 | <Sharing,Init>_2, fanIn = 0 | <Mysql,NotInstalled>_2, fanIn = 0 | <Wordpress_3,Template>, fanIn = 0 | <Wordpress_2,Template>, fanIn = 0 | <Wordpress_1,Template>, fanIn = 0 | <Httpd,Configured>, fanIn = 0 | <Mysql,SetRootPassword>, fanIn = 0 | <Mysql,ResetRootPassword>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 3 CYCLE execution nr. 2 ----------------
node to be examined: <Wordpress_1,Template>_1
<Wordpress_1,Template>_1 is NOT an initial node => need to look for parent
<Wordpress_1,Template> chosen as a copy
origin node chosen: <Wordpress_1,Template>
current generation: Generation nr.3: <Wordpress_1,Template>_1; <Mysql,Configured>
next working set, at level nr.2 : { <Wordpress_1,Template> <Mysql,SetRootPassword>  }
Nodes with fanIn values:
<Mysql,Installed>_1, fanIn = 0 | <Httpd,Installed>_1, fanIn = 0 | <Varnish,Installed>_1, fanIn = 0 | <Wordpress_1,Installed>_1, fanIn = 0 | <Wordpress_2,Installed>_1, fanIn = 0 | <Wordpress_3,Installed>_1, fanIn = 0 | <Wordpress_3,NotInstalled>_2, fanIn = 0 | <Wordpress_2,NotInstalled>_2, fanIn = 0 | <Wordpress_1,NotInstalled>_2, fanIn = 0 | <Varnish,NotInstalled>_2, fanIn = 0 | <Httpd,NotInstalled>_2, fanIn = 0 | <Sharing,Init>_2, fanIn = 0 | <Mysql,NotInstalled>_2, fanIn = 0 | <Wordpress_3,Template>, fanIn = 0 | <Wordpress_2,Template>, fanIn = 0 | <Wordpress_1,Template>, fanIn = 0 | <Httpd,Configured>, fanIn = 0 | <Mysql,SetRootPassword>, fanIn = 0 | <Mysql,ResetRootPassword>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 3 CYCLE execution nr. 3 ----------------
node to be examined: <Wordpress_2,Template>_1
<Wordpress_2,Template>_1 is NOT an initial node => need to look for parent
<Wordpress_2,Template> chosen as a copy
origin node chosen: <Wordpress_2,Template>
current generation: Generation nr.3: <Wordpress_2,Template>_1; <Wordpress_1,Template>_1; <Mysql,Configured>
next working set, at level nr.2 : { <Wordpress_2,Template> <Wordpress_1,Template> <Mysql,SetRootPassword>  }
Nodes with fanIn values:
<Mysql,Installed>_1, fanIn = 0 | <Httpd,Installed>_1, fanIn = 0 | <Varnish,Installed>_1, fanIn = 0 | <Wordpress_1,Installed>_1, fanIn = 0 | <Wordpress_2,Installed>_1, fanIn = 0 | <Wordpress_3,Installed>_1, fanIn = 0 | <Wordpress_3,NotInstalled>_2, fanIn = 0 | <Wordpress_2,NotInstalled>_2, fanIn = 0 | <Wordpress_1,NotInstalled>_2, fanIn = 0 | <Varnish,NotInstalled>_2, fanIn = 0 | <Httpd,NotInstalled>_2, fanIn = 0 | <Sharing,Init>_2, fanIn = 0 | <Mysql,NotInstalled>_2, fanIn = 0 | <Wordpress_3,Template>, fanIn = 0 | <Wordpress_2,Template>, fanIn = 0 | <Wordpress_1,Template>, fanIn = 0 | <Httpd,Configured>, fanIn = 0 | <Mysql,SetRootPassword>, fanIn = 0 | <Mysql,ResetRootPassword>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 3 CYCLE execution nr. 4 ----------------
node to be examined: <Wordpress_3,Template>_1
<Wordpress_3,Template>_1 is NOT an initial node => need to look for parent
<Wordpress_3,Template> chosen as a copy
origin node chosen: <Wordpress_3,Template>
current generation: Generation nr.3: <Wordpress_3,Template>_1; <Wordpress_2,Template>_1; <Wordpress_1,Template>_1; <Mysql,Configured>
next working set, at level nr.2 : { <Wordpress_3,Template> <Wordpress_2,Template> <Wordpress_1,Template> <Mysql,SetRootPassword>  }
Nodes with fanIn values:
<Mysql,Installed>_1, fanIn = 0 | <Httpd,Installed>_1, fanIn = 0 | <Varnish,Installed>_1, fanIn = 0 | <Wordpress_1,Installed>_1, fanIn = 0 | <Wordpress_2,Installed>_1, fanIn = 0 | <Wordpress_3,Installed>_1, fanIn = 0 | <Wordpress_3,NotInstalled>_2, fanIn = 0 | <Wordpress_2,NotInstalled>_2, fanIn = 0 | <Wordpress_1,NotInstalled>_2, fanIn = 0 | <Varnish,NotInstalled>_2, fanIn = 0 | <Httpd,NotInstalled>_2, fanIn = 0 | <Sharing,Init>_2, fanIn = 0 | <Mysql,NotInstalled>_2, fanIn = 0 | <Wordpress_3,Template>, fanIn = 0 | <Wordpress_2,Template>, fanIn = 0 | <Wordpress_1,Template>, fanIn = 0 | <Httpd,Configured>, fanIn = 0 | <Mysql,SetRootPassword>, fanIn = 0 | <Mysql,ResetRootPassword>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 3 CYCLE execution nr. 5 ----------------
node to be examined: <Httpd,Active>
<Httpd,Active> is NOT an initial node => need to look for parent
<Httpd,Configured> chosen with max fanIn value
origin node chosen: <Httpd,Configured>
<Httpd,Active> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.3: <Httpd,Active>; <Wordpress_3,Template>_1; <Wordpress_2,Template>_1; <Wordpress_1,Template>_1; <Mysql,Configured>
next working set, at level nr.2 : { <Httpd,Configured> <Wordpress_3,Template> <Wordpress_2,Template> <Wordpress_1,Template> <Mysql,SetRootPassword>  }
Nodes with fanIn values:
<Mysql,Installed>_1, fanIn = 0 | <Httpd,Installed>_1, fanIn = 0 | <Varnish,Installed>_1, fanIn = 0 | <Wordpress_1,Installed>_1, fanIn = 0 | <Wordpress_2,Installed>_1, fanIn = 0 | <Wordpress_3,Installed>_1, fanIn = 0 | <Wordpress_3,NotInstalled>_2, fanIn = 0 | <Wordpress_2,NotInstalled>_2, fanIn = 0 | <Wordpress_1,NotInstalled>_2, fanIn = 0 | <Varnish,NotInstalled>_2, fanIn = 0 | <Httpd,NotInstalled>_2, fanIn = 0 | <Sharing,Init>_2, fanIn = 0 | <Mysql,NotInstalled>_2, fanIn = 0 | <Wordpress_3,Template>, fanIn = 0 | <Wordpress_2,Template>, fanIn = 0 | <Wordpress_1,Template>, fanIn = 0 | <Httpd,Configured>, fanIn = 0 | <Mysql,SetRootPassword>, fanIn = 0 | <Mysql,ResetRootPassword>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 3 CYCLE execution nr. 6 ----------------
node to be examined: <Varnish,Installed>_2
<Varnish,Installed>_2 is NOT an initial node => need to look for parent
<Varnish,Installed>_1 chosen as a copy
origin node chosen: <Varnish,Installed>_1
current generation: Generation nr.3: <Varnish,Installed>_2; <Httpd,Active>; <Wordpress_3,Template>_1; <Wordpress_2,Template>_1; <Wordpress_1,Template>_1; <Mysql,Configured>
next working set, at level nr.2 : { <Varnish,Installed>_1 <Httpd,Configured> <Wordpress_3,Template> <Wordpress_2,Template> <Wordpress_1,Template> <Mysql,SetRootPassword>  }
Nodes with fanIn values:
<Mysql,Installed>_1, fanIn = 0 | <Httpd,Installed>_1, fanIn = 0 | <Varnish,Installed>_1, fanIn = 0 | <Wordpress_1,Installed>_1, fanIn = 0 | <Wordpress_2,Installed>_1, fanIn = 0 | <Wordpress_3,Installed>_1, fanIn = 0 | <Wordpress_3,NotInstalled>_2, fanIn = 0 | <Wordpress_2,NotInstalled>_2, fanIn = 0 | <Wordpress_1,NotInstalled>_2, fanIn = 0 | <Varnish,NotInstalled>_2, fanIn = 0 | <Httpd,NotInstalled>_2, fanIn = 0 | <Sharing,Init>_2, fanIn = 0 | <Mysql,NotInstalled>_2, fanIn = 0 | <Wordpress_3,Template>, fanIn = 0 | <Wordpress_2,Template>, fanIn = 0 | <Wordpress_1,Template>, fanIn = 0 | <Httpd,Configured>, fanIn = 0 | <Mysql,SetRootPassword>, fanIn = 0 | <Mysql,ResetRootPassword>, fanIn = 0
Total requires: 
fanIn[<Mysql,NotInstalled>_1] := 0
fanIn[<Sharing,Init>_1] := 0
fanIn[<Httpd,NotInstalled>_1] := 0
fanIn[<Varnish,NotInstalled>_1] := 0
fanIn[<Wordpress_1,NotInstalled>_1] := 0
fanIn[<Wordpress_2,NotInstalled>_1] := 0
fanIn[<Wordpress_3,NotInstalled>_1] := 0
fanIn[<Wordpress_3,Installed>] := 0
fanIn[<Wordpress_2,Installed>] := 0
fanIn[<Wordpress_1,Installed>] := 0
fanIn[<Varnish,Installed>] := 0
fanIn[<Httpd,Installed>] := 0
fanIn[<Mysql,Installed>] := 0
Nodes with fanIn values:
<Mysql,NotInstalled>_1, fanIn = 0 | <Sharing,Init>_1, fanIn = 0 | <Httpd,NotInstalled>_1, fanIn = 0 | <Varnish,NotInstalled>_1, fanIn = 0 | <Wordpress_1,NotInstalled>_1, fanIn = 0 | <Wordpress_2,NotInstalled>_1, fanIn = 0 | <Wordpress_3,NotInstalled>_1, fanIn = 0 | <Wordpress_3,Installed>, fanIn = 0 | <Wordpress_2,Installed>, fanIn = 0 | <Wordpress_1,Installed>, fanIn = 0 | <Varnish,Installed>, fanIn = 0 | <Httpd,Installed>, fanIn = 0 | <Mysql,Installed>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 2 CYCLE execution nr. 1 ----------------
node to be examined: <Varnish,Installed>_1
<Varnish,Installed>_1 is NOT an initial node => need to look for parent
<Varnish,Installed> chosen as a copy
origin node chosen: <Varnish,Installed>
current generation: Generation nr.2: <Varnish,Installed>_1
next working set, at level nr.1 : { <Varnish,Installed>  }
Nodes with fanIn values:
<Mysql,NotInstalled>_1, fanIn = 0 | <Sharing,Init>_1, fanIn = 0 | <Httpd,NotInstalled>_1, fanIn = 0 | <Varnish,NotInstalled>_1, fanIn = 0 | <Wordpress_1,NotInstalled>_1, fanIn = 0 | <Wordpress_2,NotInstalled>_1, fanIn = 0 | <Wordpress_3,NotInstalled>_1, fanIn = 0 | <Wordpress_3,Installed>, fanIn = 0 | <Wordpress_2,Installed>, fanIn = 0 | <Wordpress_1,Installed>, fanIn = 0 | <Varnish,Installed>, fanIn = 0 | <Httpd,Installed>, fanIn = 0 | <Mysql,Installed>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 2 CYCLE execution nr. 2 ----------------
node to be examined: <Httpd,Configured>
<Httpd,Configured> is NOT an initial node => need to look for parent
<Httpd,Installed> chosen with max fanIn value
origin node chosen: <Httpd,Installed>
<Httpd,Configured> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.2: <Httpd,Configured>; <Varnish,Installed>_1
next working set, at level nr.1 : { <Httpd,Installed> <Varnish,Installed>  }
Nodes with fanIn values:
<Mysql,NotInstalled>_1, fanIn = 0 | <Sharing,Init>_1, fanIn = 0 | <Httpd,NotInstalled>_1, fanIn = 0 | <Varnish,NotInstalled>_1, fanIn = 0 | <Wordpress_1,NotInstalled>_1, fanIn = 0 | <Wordpress_2,NotInstalled>_1, fanIn = 0 | <Wordpress_3,NotInstalled>_1, fanIn = 0 | <Wordpress_3,Installed>, fanIn = 0 | <Wordpress_2,Installed>, fanIn = 0 | <Wordpress_1,Installed>, fanIn = 0 | <Varnish,Installed>, fanIn = 0 | <Httpd,Installed>, fanIn = 0 | <Mysql,Installed>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 2 CYCLE execution nr. 3 ----------------
node to be examined: <Wordpress_3,Template>
<Wordpress_3,Template> is NOT an initial node => need to look for parent
<Wordpress_3,Installed> chosen with max fanIn value
origin node chosen: <Wordpress_3,Installed>
<Wordpress_3,Template> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.2: <Wordpress_3,Template>; <Httpd,Configured>; <Varnish,Installed>_1
next working set, at level nr.1 : { <Wordpress_3,Installed> <Httpd,Installed> <Varnish,Installed>  }
Nodes with fanIn values:
<Mysql,NotInstalled>_1, fanIn = 0 | <Sharing,Init>_1, fanIn = 0 | <Httpd,NotInstalled>_1, fanIn = 0 | <Varnish,NotInstalled>_1, fanIn = 0 | <Wordpress_1,NotInstalled>_1, fanIn = 0 | <Wordpress_2,NotInstalled>_1, fanIn = 0 | <Wordpress_3,NotInstalled>_1, fanIn = 0 | <Wordpress_3,Installed>, fanIn = 0 | <Wordpress_2,Installed>, fanIn = 0 | <Wordpress_1,Installed>, fanIn = 0 | <Varnish,Installed>, fanIn = 0 | <Httpd,Installed>, fanIn = 0 | <Mysql,Installed>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 2 CYCLE execution nr. 4 ----------------
node to be examined: <Wordpress_2,Template>
<Wordpress_2,Template> is NOT an initial node => need to look for parent
<Wordpress_2,Installed> chosen with max fanIn value
origin node chosen: <Wordpress_2,Installed>
<Wordpress_2,Template> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.2: <Wordpress_2,Template>; <Wordpress_3,Template>; <Httpd,Configured>; <Varnish,Installed>_1
next working set, at level nr.1 : { <Wordpress_2,Installed> <Wordpress_3,Installed> <Httpd,Installed> <Varnish,Installed>  }
Nodes with fanIn values:
<Mysql,NotInstalled>_1, fanIn = 0 | <Sharing,Init>_1, fanIn = 0 | <Httpd,NotInstalled>_1, fanIn = 0 | <Varnish,NotInstalled>_1, fanIn = 0 | <Wordpress_1,NotInstalled>_1, fanIn = 0 | <Wordpress_2,NotInstalled>_1, fanIn = 0 | <Wordpress_3,NotInstalled>_1, fanIn = 0 | <Wordpress_3,Installed>, fanIn = 0 | <Wordpress_2,Installed>, fanIn = 0 | <Wordpress_1,Installed>, fanIn = 0 | <Varnish,Installed>, fanIn = 0 | <Httpd,Installed>, fanIn = 0 | <Mysql,Installed>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 2 CYCLE execution nr. 5 ----------------
node to be examined: <Wordpress_1,Template>
<Wordpress_1,Template> is NOT an initial node => need to look for parent
<Wordpress_1,Installed> chosen with max fanIn value
origin node chosen: <Wordpress_1,Installed>
<Wordpress_1,Template> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.2: <Wordpress_1,Template>; <Wordpress_2,Template>; <Wordpress_3,Template>; <Httpd,Configured>; <Varnish,Installed>_1
next working set, at level nr.1 : { <Wordpress_1,Installed> <Wordpress_2,Installed> <Wordpress_3,Installed> <Httpd,Installed> <Varnish,Installed>  }
Nodes with fanIn values:
<Mysql,NotInstalled>_1, fanIn = 0 | <Sharing,Init>_1, fanIn = 0 | <Httpd,NotInstalled>_1, fanIn = 0 | <Varnish,NotInstalled>_1, fanIn = 0 | <Wordpress_1,NotInstalled>_1, fanIn = 0 | <Wordpress_2,NotInstalled>_1, fanIn = 0 | <Wordpress_3,NotInstalled>_1, fanIn = 0 | <Wordpress_3,Installed>, fanIn = 0 | <Wordpress_2,Installed>, fanIn = 0 | <Wordpress_1,Installed>, fanIn = 0 | <Varnish,Installed>, fanIn = 0 | <Httpd,Installed>, fanIn = 0 | <Mysql,Installed>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 2 CYCLE execution nr. 6 ----------------
node to be examined: <Mysql,SetRootPassword>
<Mysql,SetRootPassword> is NOT an initial node => need to look for parent
<Mysql,Installed> chosen with max fanIn value
origin node chosen: <Mysql,Installed>
<Mysql,SetRootPassword> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.2: <Mysql,SetRootPassword>; <Wordpress_1,Template>; <Wordpress_2,Template>; <Wordpress_3,Template>; <Httpd,Configured>; <Varnish,Installed>_1
next working set, at level nr.1 : { <Mysql,Installed> <Wordpress_1,Installed> <Wordpress_2,Installed> <Wordpress_3,Installed> <Httpd,Installed> <Varnish,Installed>  }
Nodes with fanIn values:
<Mysql,NotInstalled>_1, fanIn = 0 | <Sharing,Init>_1, fanIn = 0 | <Httpd,NotInstalled>_1, fanIn = 0 | <Varnish,NotInstalled>_1, fanIn = 0 | <Wordpress_1,NotInstalled>_1, fanIn = 0 | <Wordpress_2,NotInstalled>_1, fanIn = 0 | <Wordpress_3,NotInstalled>_1, fanIn = 0 | <Wordpress_3,Installed>, fanIn = 0 | <Wordpress_2,Installed>, fanIn = 0 | <Wordpress_1,Installed>, fanIn = 0 | <Varnish,Installed>, fanIn = 0 | <Httpd,Installed>, fanIn = 0 | <Mysql,Installed>, fanIn = 0
Total requires: 
fanIn[<Wordpress_3,NotInstalled>] := 0
fanIn[<Wordpress_2,NotInstalled>] := 0
fanIn[<Wordpress_1,NotInstalled>] := 0
fanIn[<Varnish,NotInstalled>] := 0
fanIn[<Httpd,NotInstalled>] := 0
fanIn[<Sharing,Init>] := 0
fanIn[<Mysql,NotInstalled>] := 0
Nodes with fanIn values:
<Wordpress_3,NotInstalled>, fanIn = 0 | <Wordpress_2,NotInstalled>, fanIn = 0 | <Wordpress_1,NotInstalled>, fanIn = 0 | <Varnish,NotInstalled>, fanIn = 0 | <Httpd,NotInstalled>, fanIn = 0 | <Sharing,Init>, fanIn = 0 | <Mysql,NotInstalled>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 1 CYCLE execution nr. 1 ----------------
node to be examined: <Mysql,Installed>
<Mysql,Installed> is NOT an initial node => need to look for parent
<Mysql,NotInstalled> chosen with max fanIn value
origin node chosen: <Mysql,NotInstalled>
<Mysql,Installed> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.1: <Mysql,Installed>
next working set, at level nr.0 : { <Mysql,NotInstalled>  }
Nodes with fanIn values:
<Wordpress_3,NotInstalled>, fanIn = 0 | <Wordpress_2,NotInstalled>, fanIn = 0 | <Wordpress_1,NotInstalled>, fanIn = 0 | <Varnish,NotInstalled>, fanIn = 0 | <Httpd,NotInstalled>, fanIn = 0 | <Sharing,Init>, fanIn = 0 | <Mysql,NotInstalled>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 1 CYCLE execution nr. 2 ----------------
node to be examined: <Wordpress_1,Installed>
<Wordpress_1,Installed> is NOT an initial node => need to look for parent
<Wordpress_1,NotInstalled> chosen with max fanIn value
origin node chosen: <Wordpress_1,NotInstalled>
<Wordpress_1,Installed> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.1: <Wordpress_1,Installed>; <Mysql,Installed>
next working set, at level nr.0 : { <Wordpress_1,NotInstalled> <Mysql,NotInstalled>  }
Nodes with fanIn values:
<Wordpress_3,NotInstalled>, fanIn = 0 | <Wordpress_2,NotInstalled>, fanIn = 0 | <Wordpress_1,NotInstalled>, fanIn = 0 | <Varnish,NotInstalled>, fanIn = 0 | <Httpd,NotInstalled>, fanIn = 0 | <Sharing,Init>, fanIn = 0 | <Mysql,NotInstalled>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 1 CYCLE execution nr. 3 ----------------
node to be examined: <Wordpress_2,Installed>
<Wordpress_2,Installed> is NOT an initial node => need to look for parent
<Wordpress_2,NotInstalled> chosen with max fanIn value
origin node chosen: <Wordpress_2,NotInstalled>
<Wordpress_2,Installed> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.1: <Wordpress_2,Installed>; <Wordpress_1,Installed>; <Mysql,Installed>
next working set, at level nr.0 : { <Wordpress_2,NotInstalled> <Wordpress_1,NotInstalled> <Mysql,NotInstalled>  }
Nodes with fanIn values:
<Wordpress_3,NotInstalled>, fanIn = 0 | <Wordpress_2,NotInstalled>, fanIn = 0 | <Wordpress_1,NotInstalled>, fanIn = 0 | <Varnish,NotInstalled>, fanIn = 0 | <Httpd,NotInstalled>, fanIn = 0 | <Sharing,Init>, fanIn = 0 | <Mysql,NotInstalled>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 1 CYCLE execution nr. 4 ----------------
node to be examined: <Wordpress_3,Installed>
<Wordpress_3,Installed> is NOT an initial node => need to look for parent
<Wordpress_3,NotInstalled> chosen with max fanIn value
origin node chosen: <Wordpress_3,NotInstalled>
<Wordpress_3,Installed> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.1: <Wordpress_3,Installed>; <Wordpress_2,Installed>; <Wordpress_1,Installed>; <Mysql,Installed>
next working set, at level nr.0 : { <Wordpress_3,NotInstalled> <Wordpress_2,NotInstalled> <Wordpress_1,NotInstalled> <Mysql,NotInstalled>  }
Nodes with fanIn values:
<Wordpress_3,NotInstalled>, fanIn = 0 | <Wordpress_2,NotInstalled>, fanIn = 0 | <Wordpress_1,NotInstalled>, fanIn = 0 | <Varnish,NotInstalled>, fanIn = 0 | <Httpd,NotInstalled>, fanIn = 0 | <Sharing,Init>, fanIn = 0 | <Mysql,NotInstalled>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 1 CYCLE execution nr. 5 ----------------
node to be examined: <Httpd,Installed>
<Httpd,Installed> is NOT an initial node => need to look for parent
<Httpd,NotInstalled> chosen with max fanIn value
origin node chosen: <Httpd,NotInstalled>
<Httpd,Installed> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.1: <Httpd,Installed>; <Wordpress_3,Installed>; <Wordpress_2,Installed>; <Wordpress_1,Installed>; <Mysql,Installed>
next working set, at level nr.0 : { <Httpd,NotInstalled> <Wordpress_3,NotInstalled> <Wordpress_2,NotInstalled> <Wordpress_1,NotInstalled> <Mysql,NotInstalled>  }
Nodes with fanIn values:
<Wordpress_3,NotInstalled>, fanIn = 0 | <Wordpress_2,NotInstalled>, fanIn = 0 | <Wordpress_1,NotInstalled>, fanIn = 0 | <Varnish,NotInstalled>, fanIn = 0 | <Httpd,NotInstalled>, fanIn = 0 | <Sharing,Init>, fanIn = 0 | <Mysql,NotInstalled>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 1 CYCLE execution nr. 6 ----------------
node to be examined: <Varnish,Installed>
<Varnish,Installed> is NOT an initial node => need to look for parent
<Varnish,NotInstalled> chosen with max fanIn value
origin node chosen: <Varnish,NotInstalled>
<Varnish,Installed> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.1: <Varnish,Installed>; <Httpd,Installed>; <Wordpress_3,Installed>; <Wordpress_2,Installed>; <Wordpress_1,Installed>; <Mysql,Installed>
next working set, at level nr.0 : { <Varnish,NotInstalled> <Httpd,NotInstalled> <Wordpress_3,NotInstalled> <Wordpress_2,NotInstalled> <Wordpress_1,NotInstalled> <Mysql,NotInstalled>  }
Nodes with fanIn values:
<Wordpress_3,NotInstalled>, fanIn = 0 | <Wordpress_2,NotInstalled>, fanIn = 0 | <Wordpress_1,NotInstalled>, fanIn = 0 | <Varnish,NotInstalled>, fanIn = 0 | <Httpd,NotInstalled>, fanIn = 0 | <Sharing,Init>, fanIn = 0 | <Mysql,NotInstalled>, fanIn = 0

LINEARIZATION phase

The linearized paths are the following:

<Mysql,NotInstalled> <Mysql,Installed> <Mysql,SetRootPassword> <Mysql,Configured> <Mysql,Active.ActiveOnMBS> <Mysql,Active> 

<Httpd,NotInstalled> <Httpd,Installed> <Httpd,Configured> <Httpd,Active> 

<Wordpress_1,NotInstalled> <Wordpress_1,Installed> <Wordpress_1,Template> <Wordpress_1,Configured> <Wordpress_1,Active> 

<Wordpress_2,NotInstalled> <Wordpress_2,Installed> <Wordpress_2,Template> <Wordpress_2,Configured> <Wordpress_2,Active> 

<Wordpress_3,NotInstalled> <Wordpress_3,Installed> <Wordpress_3,Template> <Wordpress_3,Configured> <Wordpress_3,Active> 

<Varnish,NotInstalled> <Varnish,Installed> <Varnish,Configured> <Varnish,Active> 


The INSTANCE LINES are the following:

Instance varnish :
varnish (C,NotInstalled) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Varnish,NotInstalled>--> varnish (NotInstalled,Installed)

varnish (NotInstalled,Installed) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Varnish,Installed>--> varnish (Installed,Configured)

varnish (Installed,Configured) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Varnish,Configured>--> varnish (Configured,Active)

varnish (Configured,Active) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Varnish,Active>--> varnish (Active,D)

varnish (Active,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Instance wordpress_3 :
wordpress_3 (C,NotInstalled) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_3,NotInstalled>--> wordpress_3 (NotInstalled,Installed)

wordpress_3 (NotInstalled,Installed) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_3,Installed>--> wordpress_3 (Installed,Template)

wordpress_3 (Installed,Template) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_3,Template>--> wordpress_3 (Template,Configured)

wordpress_3 (Template,Configured) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_3,Configured>--> wordpress_3 (Configured,Active)

wordpress_3 (Configured,Active) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_3,Active>--> wordpress_3 (Active,D)

wordpress_3 (Active,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Instance wordpress_2 :
wordpress_2 (C,NotInstalled) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_2,NotInstalled>--> wordpress_2 (NotInstalled,Installed)

wordpress_2 (NotInstalled,Installed) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_2,Installed>--> wordpress_2 (Installed,Template)

wordpress_2 (Installed,Template) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_2,Template>--> wordpress_2 (Template,Configured)

wordpress_2 (Template,Configured) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_2,Configured>--> wordpress_2 (Configured,Active)

wordpress_2 (Configured,Active) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_2,Active>--> wordpress_2 (Active,D)

wordpress_2 (Active,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Instance wordpress_1 :
wordpress_1 (C,NotInstalled) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_1,NotInstalled>--> wordpress_1 (NotInstalled,Installed)

wordpress_1 (NotInstalled,Installed) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_1,Installed>--> wordpress_1 (Installed,Template)

wordpress_1 (Installed,Template) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_1,Template>--> wordpress_1 (Template,Configured)

wordpress_1 (Template,Configured) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_1,Configured>--> wordpress_1 (Configured,Active)

wordpress_1 (Configured,Active) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_1,Active>--> wordpress_1 (Active,D)

wordpress_1 (Active,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Instance httpd :
httpd (C,NotInstalled) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Httpd,NotInstalled>--> httpd (NotInstalled,Installed)

httpd (NotInstalled,Installed) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Httpd,Installed>--> httpd (Installed,Configured)

httpd (Installed,Configured) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Httpd,Configured>--> httpd (Configured,Active)

httpd (Configured,Active) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Httpd,Active>--> httpd (Active,D)

httpd (Active,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Instance mysql :
mysql (C,NotInstalled) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Mysql,NotInstalled>--> mysql (NotInstalled,Installed)

mysql (NotInstalled,Installed) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Mysql,Installed>--> mysql (Installed,SetRootPassword)

mysql (Installed,SetRootPassword) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Mysql,SetRootPassword>--> mysql (SetRootPassword,Configured)

mysql (SetRootPassword,Configured) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Mysql,Configured>--> mysql (Configured,Active.ActiveOnMBS)

mysql (Configured,Active.ActiveOnMBS) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Mysql,Active.ActiveOnMBS>--> mysql (Active.ActiveOnMBS,Active)

mysql (Active.ActiveOnMBS,Active) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Mysql,Active>--> mysql (Active,D)

mysql (Active,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Next we ADD GO (blue) and RETURN (red) EDGES.

Instance varnish :
varnish (C,NotInstalled) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Varnish,NotInstalled>--> varnish (NotInstalled,Installed)

varnish (NotInstalled,Installed) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Varnish,Installed>--> varnish (Installed,Configured)

varnish (Installed,Configured) nr.IN-edges =  4
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Varnish,Configured>--> varnish (Configured,Active)

varnish (Configured,Active) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: ---/mbs/Wordpress-1/Active/get_website---> wordpress_1 (Active,D); ---/mbs/Wordpress-2/Active/get_website---> wordpress_2 (Active,D); ---/mbs/Wordpress-3/Active/get_website---> wordpress_3 (Active,D)
 INST EDGE: --<Varnish,Active>--> varnish (Active,D)

varnish (Active,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Instance wordpress_3 :
wordpress_3 (C,NotInstalled) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_3,NotInstalled>--> wordpress_3 (NotInstalled,Installed)

wordpress_3 (NotInstalled,Installed) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_3,Installed>--> wordpress_3 (Installed,Template)

wordpress_3 (Installed,Template) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_3,Template>--> wordpress_3 (Template,Configured)

wordpress_3 (Template,Configured) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_3,Configured>--> wordpress_3 (Configured,Active)

wordpress_3 (Configured,Active) nr.IN-edges =  3
 GO EDGES: ---/mbs/Wordpress-3/Active/get_website---> varnish (Installed,Configured)
 RETURN EDGES: ---/mbs/Mysql/Active/addDatabase---> mysql (Active,D)
 INST EDGE: --<Wordpress_3,Active>--> wordpress_3 (Active,D)

wordpress_3 (Active,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: ---/mbs/Httpd/Active/start---> httpd (Active,D); ---Httpd.get_documentRoot---> httpd (Active,D)
 INST EDGE: { }

Instance wordpress_2 :
wordpress_2 (C,NotInstalled) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_2,NotInstalled>--> wordpress_2 (NotInstalled,Installed)

wordpress_2 (NotInstalled,Installed) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_2,Installed>--> wordpress_2 (Installed,Template)

wordpress_2 (Installed,Template) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_2,Template>--> wordpress_2 (Template,Configured)

wordpress_2 (Template,Configured) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_2,Configured>--> wordpress_2 (Configured,Active)

wordpress_2 (Configured,Active) nr.IN-edges =  3
 GO EDGES: ---/mbs/Wordpress-2/Active/get_website---> varnish (Installed,Configured)
 RETURN EDGES: ---/mbs/Mysql/Active/addDatabase---> mysql (Active,D)
 INST EDGE: --<Wordpress_2,Active>--> wordpress_2 (Active,D)

wordpress_2 (Active,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: ---/mbs/Httpd/Active/start---> httpd (Active,D); ---Httpd.get_documentRoot---> httpd (Active,D)
 INST EDGE: { }

Instance wordpress_1 :
wordpress_1 (C,NotInstalled) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_1,NotInstalled>--> wordpress_1 (NotInstalled,Installed)

wordpress_1 (NotInstalled,Installed) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_1,Installed>--> wordpress_1 (Installed,Template)

wordpress_1 (Installed,Template) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_1,Template>--> wordpress_1 (Template,Configured)

wordpress_1 (Template,Configured) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_1,Configured>--> wordpress_1 (Configured,Active)

wordpress_1 (Configured,Active) nr.IN-edges =  3
 GO EDGES: ---/mbs/Wordpress-1/Active/get_website---> varnish (Installed,Configured)
 RETURN EDGES: ---/mbs/Mysql/Active/addDatabase---> mysql (Active,D)
 INST EDGE: --<Wordpress_1,Active>--> wordpress_1 (Active,D)

wordpress_1 (Active,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: ---/mbs/Httpd/Active/start---> httpd (Active,D); ---Httpd.get_documentRoot---> httpd (Active,D)
 INST EDGE: { }

Instance httpd :
httpd (C,NotInstalled) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Httpd,NotInstalled>--> httpd (NotInstalled,Installed)

httpd (NotInstalled,Installed) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Httpd,Installed>--> httpd (Installed,Configured)

httpd (Installed,Configured) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Httpd,Configured>--> httpd (Configured,Active)

httpd (Configured,Active) nr.IN-edges =  1
 GO EDGES: ---/mbs/Httpd/Active/start---> wordpress_1 (Configured,Active); ---Httpd.get_documentRoot---> wordpress_1 (Configured,Active); ---/mbs/Httpd/Active/start---> wordpress_2 (Configured,Active); ---Httpd.get_documentRoot---> wordpress_2 (Configured,Active); ---/mbs/Httpd/Active/start---> wordpress_3 (Configured,Active); ---Httpd.get_documentRoot---> wordpress_3 (Configured,Active)
 RETURN EDGES: 
 INST EDGE: --<Httpd,Active>--> httpd (Active,D)

httpd (Active,D) nr.IN-edges =  7
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Instance mysql :
mysql (C,NotInstalled) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Mysql,NotInstalled>--> mysql (NotInstalled,Installed)

mysql (NotInstalled,Installed) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Mysql,Installed>--> mysql (Installed,SetRootPassword)

mysql (Installed,SetRootPassword) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Mysql,SetRootPassword>--> mysql (SetRootPassword,Configured)

mysql (SetRootPassword,Configured) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Mysql,Configured>--> mysql (Configured,Active.ActiveOnMBS)

mysql (Configured,Active.ActiveOnMBS) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Mysql,Active.ActiveOnMBS>--> mysql (Active.ActiveOnMBS,Active)

mysql (Active.ActiveOnMBS,Active) nr.IN-edges =  1
 GO EDGES: ---/mbs/Mysql/Active/addDatabase---> wordpress_1 (Template,Configured); ---/mbs/Mysql/Active/addDatabase---> wordpress_2 (Template,Configured); ---/mbs/Mysql/Active/addDatabase---> wordpress_3 (Template,Configured)
 RETURN EDGES: 
 INST EDGE: --<Mysql,Active>--> mysql (Active,D)

mysql (Active,D) nr.IN-edges =  4
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Next we FIX ENCLOSING GO (blue) and RETURN (red) EDGES.
################# Fix enclosing edges for vertex wordpress_3 (Configured,Active) and GO edge ---/mbs/Wordpress-3/Active/get_website---> varnish (Installed,Configured)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

################# Fix enclosing edges for vertex wordpress_2 (Configured,Active) and GO edge ---/mbs/Wordpress-2/Active/get_website---> varnish (Installed,Configured)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

################# Fix enclosing edges for vertex wordpress_1 (Configured,Active) and GO edge ---/mbs/Wordpress-1/Active/get_website---> varnish (Installed,Configured)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

################# Fix enclosing edges for vertex httpd (Configured,Active) and GO edge ---/mbs/Httpd/Active/start---> wordpress_1 (Configured,Active)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

################# Fix enclosing edges for vertex httpd (Configured,Active) and GO edge ---Httpd.get_documentRoot---> wordpress_1 (Configured,Active)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

################# Fix enclosing edges for vertex httpd (Configured,Active) and GO edge ---/mbs/Httpd/Active/start---> wordpress_2 (Configured,Active)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

################# Fix enclosing edges for vertex httpd (Configured,Active) and GO edge ---Httpd.get_documentRoot---> wordpress_2 (Configured,Active)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

################# Fix enclosing edges for vertex httpd (Configured,Active) and GO edge ---/mbs/Httpd/Active/start---> wordpress_3 (Configured,Active)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

################# Fix enclosing edges for vertex httpd (Configured,Active) and GO edge ---Httpd.get_documentRoot---> wordpress_3 (Configured,Active)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

################# Fix enclosing edges for vertex mysql (Active.ActiveOnMBS,Active) and GO edge ---/mbs/Mysql/Active/addDatabase---> wordpress_1 (Template,Configured)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

################# Fix enclosing edges for vertex mysql (Active.ActiveOnMBS,Active) and GO edge ---/mbs/Mysql/Active/addDatabase---> wordpress_2 (Template,Configured)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

################# Fix enclosing edges for vertex mysql (Active.ActiveOnMBS,Active) and GO edge ---/mbs/Mysql/Active/addDatabase---> wordpress_3 (Template,Configured)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

Now the INSTANCE LINES WITH EDGES look like this:

Instance varnish :
varnish (C,NotInstalled) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Varnish,NotInstalled>--> varnish (NotInstalled,Installed)

varnish (NotInstalled,Installed) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Varnish,Installed>--> varnish (Installed,Configured)

varnish (Installed,Configured) nr.IN-edges =  4
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Varnish,Configured>--> varnish (Configured,Active)

varnish (Configured,Active) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: ---/mbs/Wordpress-1/Active/get_website---> wordpress_1 (Active,D); ---/mbs/Wordpress-2/Active/get_website---> wordpress_2 (Active,D); ---/mbs/Wordpress-3/Active/get_website---> wordpress_3 (Active,D)
 INST EDGE: --<Varnish,Active>--> varnish (Active,D)

varnish (Active,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Instance wordpress_3 :
wordpress_3 (C,NotInstalled) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_3,NotInstalled>--> wordpress_3 (NotInstalled,Installed)

wordpress_3 (NotInstalled,Installed) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_3,Installed>--> wordpress_3 (Installed,Template)

wordpress_3 (Installed,Template) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_3,Template>--> wordpress_3 (Template,Configured)

wordpress_3 (Template,Configured) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_3,Configured>--> wordpress_3 (Configured,Active)

wordpress_3 (Configured,Active) nr.IN-edges =  3
 GO EDGES: ---/mbs/Wordpress-3/Active/get_website---> varnish (Installed,Configured)
 RETURN EDGES: ---/mbs/Mysql/Active/addDatabase---> mysql (Active,D)
 INST EDGE: --<Wordpress_3,Active>--> wordpress_3 (Active,D)

wordpress_3 (Active,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: ---/mbs/Httpd/Active/start---> httpd (Active,D); ---Httpd.get_documentRoot---> httpd (Active,D)
 INST EDGE: { }

Instance wordpress_2 :
wordpress_2 (C,NotInstalled) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_2,NotInstalled>--> wordpress_2 (NotInstalled,Installed)

wordpress_2 (NotInstalled,Installed) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_2,Installed>--> wordpress_2 (Installed,Template)

wordpress_2 (Installed,Template) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_2,Template>--> wordpress_2 (Template,Configured)

wordpress_2 (Template,Configured) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_2,Configured>--> wordpress_2 (Configured,Active)

wordpress_2 (Configured,Active) nr.IN-edges =  3
 GO EDGES: ---/mbs/Wordpress-2/Active/get_website---> varnish (Installed,Configured)
 RETURN EDGES: ---/mbs/Mysql/Active/addDatabase---> mysql (Active,D)
 INST EDGE: --<Wordpress_2,Active>--> wordpress_2 (Active,D)

wordpress_2 (Active,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: ---/mbs/Httpd/Active/start---> httpd (Active,D); ---Httpd.get_documentRoot---> httpd (Active,D)
 INST EDGE: { }

Instance wordpress_1 :
wordpress_1 (C,NotInstalled) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_1,NotInstalled>--> wordpress_1 (NotInstalled,Installed)

wordpress_1 (NotInstalled,Installed) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_1,Installed>--> wordpress_1 (Installed,Template)

wordpress_1 (Installed,Template) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_1,Template>--> wordpress_1 (Template,Configured)

wordpress_1 (Template,Configured) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Wordpress_1,Configured>--> wordpress_1 (Configured,Active)

wordpress_1 (Configured,Active) nr.IN-edges =  3
 GO EDGES: ---/mbs/Wordpress-1/Active/get_website---> varnish (Installed,Configured)
 RETURN EDGES: ---/mbs/Mysql/Active/addDatabase---> mysql (Active,D)
 INST EDGE: --<Wordpress_1,Active>--> wordpress_1 (Active,D)

wordpress_1 (Active,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: ---/mbs/Httpd/Active/start---> httpd (Active,D); ---Httpd.get_documentRoot---> httpd (Active,D)
 INST EDGE: { }

Instance httpd :
httpd (C,NotInstalled) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Httpd,NotInstalled>--> httpd (NotInstalled,Installed)

httpd (NotInstalled,Installed) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Httpd,Installed>--> httpd (Installed,Configured)

httpd (Installed,Configured) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Httpd,Configured>--> httpd (Configured,Active)

httpd (Configured,Active) nr.IN-edges =  1
 GO EDGES: ---/mbs/Httpd/Active/start---> wordpress_1 (Configured,Active); ---Httpd.get_documentRoot---> wordpress_1 (Configured,Active); ---/mbs/Httpd/Active/start---> wordpress_2 (Configured,Active); ---Httpd.get_documentRoot---> wordpress_2 (Configured,Active); ---/mbs/Httpd/Active/start---> wordpress_3 (Configured,Active); ---Httpd.get_documentRoot---> wordpress_3 (Configured,Active)
 RETURN EDGES: 
 INST EDGE: --<Httpd,Active>--> httpd (Active,D)

httpd (Active,D) nr.IN-edges =  7
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Instance mysql :
mysql (C,NotInstalled) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Mysql,NotInstalled>--> mysql (NotInstalled,Installed)

mysql (NotInstalled,Installed) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Mysql,Installed>--> mysql (Installed,SetRootPassword)

mysql (Installed,SetRootPassword) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Mysql,SetRootPassword>--> mysql (SetRootPassword,Configured)

mysql (SetRootPassword,Configured) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Mysql,Configured>--> mysql (Configured,Active.ActiveOnMBS)

mysql (Configured,Active.ActiveOnMBS) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Mysql,Active.ActiveOnMBS>--> mysql (Active.ActiveOnMBS,Active)

mysql (Active.ActiveOnMBS,Active) nr.IN-edges =  1
 GO EDGES: ---/mbs/Mysql/Active/addDatabase---> wordpress_1 (Template,Configured); ---/mbs/Mysql/Active/addDatabase---> wordpress_2 (Template,Configured); ---/mbs/Mysql/Active/addDatabase---> wordpress_3 (Template,Configured)
 RETURN EDGES: 
 INST EDGE: --<Mysql,Active>--> mysql (Active,D)

mysql (Active,D) nr.IN-edges =  4
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }


----------------------- PLAN SYNTHESIS START -----------------------
Added action [Create instance varnish:Varnish] to the plan.
Added action [Create instance wordpress_3:Wordpress_3] to the plan.
Added action [Create instance wordpress_2:Wordpress_2] to the plan.
Added action [Create instance wordpress_1:Wordpress_1] to the plan.
Added action [Create instance httpd:Httpd] to the plan.
Added action [Create instance mysql:Mysql] to the plan.
External loop iteration i = 0

*********************** Internal loop iteration j = 0
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
Vertex popped: mysql (C,NotInstalled)
STACK = 
httpd (C,NotInstalled) | wordpress_1 (C,NotInstalled) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Deal with successor vertex.
INST Edge: PUSH vertex: mysql (NotInstalled,Installed)
STACK = 
mysql (NotInstalled,Installed) | httpd (C,NotInstalled) | wordpress_1 (C,NotInstalled) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Vertex removed: mysql (C,NotInstalled)

*********************** Internal loop iteration j = 1
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
Vertex popped: mysql (NotInstalled,Installed)
STACK = 
httpd (C,NotInstalled) | wordpress_1 (C,NotInstalled) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [mysql : change state from NotInstalled to Installed] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: mysql (Installed,SetRootPassword)
STACK = 
mysql (Installed,SetRootPassword) | httpd (C,NotInstalled) | wordpress_1 (C,NotInstalled) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Vertex removed: mysql (NotInstalled,Installed)

*********************** Internal loop iteration j = 2
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
Vertex popped: mysql (Installed,SetRootPassword)
STACK = 
httpd (C,NotInstalled) | wordpress_1 (C,NotInstalled) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [mysql : change state from Installed to SetRootPassword] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: mysql (SetRootPassword,Configured)
STACK = 
mysql (SetRootPassword,Configured) | httpd (C,NotInstalled) | wordpress_1 (C,NotInstalled) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Vertex removed: mysql (Installed,SetRootPassword)

*********************** Internal loop iteration j = 3
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
Vertex popped: mysql (SetRootPassword,Configured)
STACK = 
httpd (C,NotInstalled) | wordpress_1 (C,NotInstalled) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [mysql : change state from SetRootPassword to Configured] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: mysql (Configured,Active.ActiveOnMBS)
STACK = 
mysql (Configured,Active.ActiveOnMBS) | httpd (C,NotInstalled) | wordpress_1 (C,NotInstalled) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Vertex removed: mysql (SetRootPassword,Configured)

*********************** Internal loop iteration j = 4
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
Vertex popped: mysql (Configured,Active.ActiveOnMBS)
STACK = 
httpd (C,NotInstalled) | wordpress_1 (C,NotInstalled) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [mysql : change state from Configured to Active.ActiveOnMBS] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: mysql (Active.ActiveOnMBS,Active)
STACK = 
mysql (Active.ActiveOnMBS,Active) | httpd (C,NotInstalled) | wordpress_1 (C,NotInstalled) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Vertex removed: mysql (Configured,Active.ActiveOnMBS)

*********************** Internal loop iteration j = 5
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
Vertex popped: mysql (Active.ActiveOnMBS,Active)
STACK = 
httpd (C,NotInstalled) | wordpress_1 (C,NotInstalled) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [mysql : change state from Active.ActiveOnMBS to Active] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
Vertex removed: mysql (Active.ActiveOnMBS,Active)

*********************** Internal loop iteration j = 6
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
Vertex popped: httpd (C,NotInstalled)
STACK = 
wordpress_1 (C,NotInstalled) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Deal with successor vertex.
INST Edge: PUSH vertex: httpd (NotInstalled,Installed)
STACK = 
httpd (NotInstalled,Installed) | wordpress_1 (C,NotInstalled) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Vertex removed: httpd (C,NotInstalled)

*********************** Internal loop iteration j = 7
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
Vertex popped: httpd (NotInstalled,Installed)
STACK = 
wordpress_1 (C,NotInstalled) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [httpd : change state from NotInstalled to Installed] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: httpd (Installed,Configured)
STACK = 
httpd (Installed,Configured) | wordpress_1 (C,NotInstalled) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Vertex removed: httpd (NotInstalled,Installed)

*********************** Internal loop iteration j = 8
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
Vertex popped: httpd (Installed,Configured)
STACK = 
wordpress_1 (C,NotInstalled) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [httpd : change state from Installed to Configured] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: httpd (Configured,Active)
STACK = 
httpd (Configured,Active) | wordpress_1 (C,NotInstalled) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Vertex removed: httpd (Installed,Configured)

*********************** Internal loop iteration j = 9
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
Vertex popped: httpd (Configured,Active)
STACK = 
wordpress_1 (C,NotInstalled) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [httpd : change state from Configured to Active] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
Vertex removed: httpd (Configured,Active)

*********************** Internal loop iteration j = 10
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
Vertex popped: wordpress_1 (C,NotInstalled)
STACK = 
wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Deal with successor vertex.
INST Edge: PUSH vertex: wordpress_1 (NotInstalled,Installed)
STACK = 
wordpress_1 (NotInstalled,Installed) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Vertex removed: wordpress_1 (C,NotInstalled)

*********************** Internal loop iteration j = 11
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
Vertex popped: wordpress_1 (NotInstalled,Installed)
STACK = 
wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [wordpress_1 : change state from NotInstalled to Installed] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: wordpress_1 (Installed,Template)
STACK = 
wordpress_1 (Installed,Template) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Vertex removed: wordpress_1 (NotInstalled,Installed)

*********************** Internal loop iteration j = 12
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
Vertex popped: wordpress_1 (Installed,Template)
STACK = 
wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [wordpress_1 : change state from Installed to Template] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: wordpress_1 (Template,Configured)
STACK = 
wordpress_1 (Template,Configured) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Vertex removed: wordpress_1 (Installed,Template)

*********************** Internal loop iteration j = 13
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
 Plan[16] = [wordpress_1 : change state from Installed to Template]
Vertex popped: wordpress_1 (Template,Configured)
STACK = 
wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [wordpress_1 : change state from Template to Configured] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: wordpress_1 (Configured,Active)
STACK = 
wordpress_1 (Configured,Active) | wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Vertex removed: wordpress_1 (Template,Configured)

*********************** Internal loop iteration j = 14
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
 Plan[16] = [wordpress_1 : change state from Installed to Template]
 Plan[17] = [wordpress_1 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[18] = [wordpress_1 : change state from Template to Configured]
Vertex popped: wordpress_1 (Configured,Active)
STACK = 
wordpress_2 (C,NotInstalled) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [wordpress_1 : change state from Configured to Active] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
Vertex removed: wordpress_1 (Configured,Active)

*********************** Internal loop iteration j = 15
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
 Plan[16] = [wordpress_1 : change state from Installed to Template]
 Plan[17] = [wordpress_1 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[18] = [wordpress_1 : change state from Template to Configured]
 Plan[19] = [wordpress_1 : invoke method Httpd.get_documentRoot of httpd]
 Plan[20] = [wordpress_1 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[21] = [wordpress_1 : change state from Configured to Active]
Vertex popped: wordpress_2 (C,NotInstalled)
STACK = 
wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Deal with successor vertex.
INST Edge: PUSH vertex: wordpress_2 (NotInstalled,Installed)
STACK = 
wordpress_2 (NotInstalled,Installed) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Vertex removed: wordpress_2 (C,NotInstalled)

*********************** Internal loop iteration j = 16
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
 Plan[16] = [wordpress_1 : change state from Installed to Template]
 Plan[17] = [wordpress_1 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[18] = [wordpress_1 : change state from Template to Configured]
 Plan[19] = [wordpress_1 : invoke method Httpd.get_documentRoot of httpd]
 Plan[20] = [wordpress_1 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[21] = [wordpress_1 : change state from Configured to Active]
Vertex popped: wordpress_2 (NotInstalled,Installed)
STACK = 
wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [wordpress_2 : change state from NotInstalled to Installed] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: wordpress_2 (Installed,Template)
STACK = 
wordpress_2 (Installed,Template) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Vertex removed: wordpress_2 (NotInstalled,Installed)

*********************** Internal loop iteration j = 17
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
 Plan[16] = [wordpress_1 : change state from Installed to Template]
 Plan[17] = [wordpress_1 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[18] = [wordpress_1 : change state from Template to Configured]
 Plan[19] = [wordpress_1 : invoke method Httpd.get_documentRoot of httpd]
 Plan[20] = [wordpress_1 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[21] = [wordpress_1 : change state from Configured to Active]
 Plan[22] = [wordpress_2 : change state from NotInstalled to Installed]
Vertex popped: wordpress_2 (Installed,Template)
STACK = 
wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [wordpress_2 : change state from Installed to Template] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: wordpress_2 (Template,Configured)
STACK = 
wordpress_2 (Template,Configured) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Vertex removed: wordpress_2 (Installed,Template)

*********************** Internal loop iteration j = 18
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
 Plan[16] = [wordpress_1 : change state from Installed to Template]
 Plan[17] = [wordpress_1 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[18] = [wordpress_1 : change state from Template to Configured]
 Plan[19] = [wordpress_1 : invoke method Httpd.get_documentRoot of httpd]
 Plan[20] = [wordpress_1 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[21] = [wordpress_1 : change state from Configured to Active]
 Plan[22] = [wordpress_2 : change state from NotInstalled to Installed]
 Plan[23] = [wordpress_2 : change state from Installed to Template]
Vertex popped: wordpress_2 (Template,Configured)
STACK = 
wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [wordpress_2 : change state from Template to Configured] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: wordpress_2 (Configured,Active)
STACK = 
wordpress_2 (Configured,Active) | wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
Vertex removed: wordpress_2 (Template,Configured)

*********************** Internal loop iteration j = 19
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
 Plan[16] = [wordpress_1 : change state from Installed to Template]
 Plan[17] = [wordpress_1 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[18] = [wordpress_1 : change state from Template to Configured]
 Plan[19] = [wordpress_1 : invoke method Httpd.get_documentRoot of httpd]
 Plan[20] = [wordpress_1 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[21] = [wordpress_1 : change state from Configured to Active]
 Plan[22] = [wordpress_2 : change state from NotInstalled to Installed]
 Plan[23] = [wordpress_2 : change state from Installed to Template]
 Plan[24] = [wordpress_2 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[25] = [wordpress_2 : change state from Template to Configured]
Vertex popped: wordpress_2 (Configured,Active)
STACK = 
wordpress_3 (C,NotInstalled) | varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [wordpress_2 : change state from Configured to Active] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
Vertex removed: wordpress_2 (Configured,Active)

*********************** Internal loop iteration j = 20
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
 Plan[16] = [wordpress_1 : change state from Installed to Template]
 Plan[17] = [wordpress_1 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[18] = [wordpress_1 : change state from Template to Configured]
 Plan[19] = [wordpress_1 : invoke method Httpd.get_documentRoot of httpd]
 Plan[20] = [wordpress_1 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[21] = [wordpress_1 : change state from Configured to Active]
 Plan[22] = [wordpress_2 : change state from NotInstalled to Installed]
 Plan[23] = [wordpress_2 : change state from Installed to Template]
 Plan[24] = [wordpress_2 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[25] = [wordpress_2 : change state from Template to Configured]
 Plan[26] = [wordpress_2 : invoke method Httpd.get_documentRoot of httpd]
 Plan[27] = [wordpress_2 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[28] = [wordpress_2 : change state from Configured to Active]
Vertex popped: wordpress_3 (C,NotInstalled)
STACK = 
varnish (C,NotInstalled) | 
Deal with successor vertex.
INST Edge: PUSH vertex: wordpress_3 (NotInstalled,Installed)
STACK = 
wordpress_3 (NotInstalled,Installed) | varnish (C,NotInstalled) | 
Vertex removed: wordpress_3 (C,NotInstalled)

*********************** Internal loop iteration j = 21
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
 Plan[16] = [wordpress_1 : change state from Installed to Template]
 Plan[17] = [wordpress_1 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[18] = [wordpress_1 : change state from Template to Configured]
 Plan[19] = [wordpress_1 : invoke method Httpd.get_documentRoot of httpd]
 Plan[20] = [wordpress_1 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[21] = [wordpress_1 : change state from Configured to Active]
 Plan[22] = [wordpress_2 : change state from NotInstalled to Installed]
 Plan[23] = [wordpress_2 : change state from Installed to Template]
 Plan[24] = [wordpress_2 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[25] = [wordpress_2 : change state from Template to Configured]
 Plan[26] = [wordpress_2 : invoke method Httpd.get_documentRoot of httpd]
 Plan[27] = [wordpress_2 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[28] = [wordpress_2 : change state from Configured to Active]
Vertex popped: wordpress_3 (NotInstalled,Installed)
STACK = 
varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [wordpress_3 : change state from NotInstalled to Installed] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: wordpress_3 (Installed,Template)
STACK = 
wordpress_3 (Installed,Template) | varnish (C,NotInstalled) | 
Vertex removed: wordpress_3 (NotInstalled,Installed)

*********************** Internal loop iteration j = 22
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
 Plan[16] = [wordpress_1 : change state from Installed to Template]
 Plan[17] = [wordpress_1 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[18] = [wordpress_1 : change state from Template to Configured]
 Plan[19] = [wordpress_1 : invoke method Httpd.get_documentRoot of httpd]
 Plan[20] = [wordpress_1 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[21] = [wordpress_1 : change state from Configured to Active]
 Plan[22] = [wordpress_2 : change state from NotInstalled to Installed]
 Plan[23] = [wordpress_2 : change state from Installed to Template]
 Plan[24] = [wordpress_2 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[25] = [wordpress_2 : change state from Template to Configured]
 Plan[26] = [wordpress_2 : invoke method Httpd.get_documentRoot of httpd]
 Plan[27] = [wordpress_2 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[28] = [wordpress_2 : change state from Configured to Active]
 Plan[29] = [wordpress_3 : change state from NotInstalled to Installed]
Vertex popped: wordpress_3 (Installed,Template)
STACK = 
varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [wordpress_3 : change state from Installed to Template] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: wordpress_3 (Template,Configured)
STACK = 
wordpress_3 (Template,Configured) | varnish (C,NotInstalled) | 
Vertex removed: wordpress_3 (Installed,Template)

*********************** Internal loop iteration j = 23
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
 Plan[16] = [wordpress_1 : change state from Installed to Template]
 Plan[17] = [wordpress_1 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[18] = [wordpress_1 : change state from Template to Configured]
 Plan[19] = [wordpress_1 : invoke method Httpd.get_documentRoot of httpd]
 Plan[20] = [wordpress_1 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[21] = [wordpress_1 : change state from Configured to Active]
 Plan[22] = [wordpress_2 : change state from NotInstalled to Installed]
 Plan[23] = [wordpress_2 : change state from Installed to Template]
 Plan[24] = [wordpress_2 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[25] = [wordpress_2 : change state from Template to Configured]
 Plan[26] = [wordpress_2 : invoke method Httpd.get_documentRoot of httpd]
 Plan[27] = [wordpress_2 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[28] = [wordpress_2 : change state from Configured to Active]
 Plan[29] = [wordpress_3 : change state from NotInstalled to Installed]
 Plan[30] = [wordpress_3 : change state from Installed to Template]
Vertex popped: wordpress_3 (Template,Configured)
STACK = 
varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [wordpress_3 : change state from Template to Configured] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: wordpress_3 (Configured,Active)
STACK = 
wordpress_3 (Configured,Active) | varnish (C,NotInstalled) | 
Vertex removed: wordpress_3 (Template,Configured)

*********************** Internal loop iteration j = 24
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
 Plan[16] = [wordpress_1 : change state from Installed to Template]
 Plan[17] = [wordpress_1 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[18] = [wordpress_1 : change state from Template to Configured]
 Plan[19] = [wordpress_1 : invoke method Httpd.get_documentRoot of httpd]
 Plan[20] = [wordpress_1 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[21] = [wordpress_1 : change state from Configured to Active]
 Plan[22] = [wordpress_2 : change state from NotInstalled to Installed]
 Plan[23] = [wordpress_2 : change state from Installed to Template]
 Plan[24] = [wordpress_2 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[25] = [wordpress_2 : change state from Template to Configured]
 Plan[26] = [wordpress_2 : invoke method Httpd.get_documentRoot of httpd]
 Plan[27] = [wordpress_2 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[28] = [wordpress_2 : change state from Configured to Active]
 Plan[29] = [wordpress_3 : change state from NotInstalled to Installed]
 Plan[30] = [wordpress_3 : change state from Installed to Template]
 Plan[31] = [wordpress_3 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[32] = [wordpress_3 : change state from Template to Configured]
Vertex popped: wordpress_3 (Configured,Active)
STACK = 
varnish (C,NotInstalled) | 
It's an intermediate vertex => add action [wordpress_3 : change state from Configured to Active] to the plan.
Deal with go/blue edges
Deal with return/red edges
RETURN Edge: PUSH vertex: mysql (Active,D)
STACK = 
mysql (Active,D) | varnish (C,NotInstalled) | 
Deal with successor vertex.
Vertex removed: wordpress_3 (Configured,Active)

*********************** Internal loop iteration j = 25
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
 Plan[16] = [wordpress_1 : change state from Installed to Template]
 Plan[17] = [wordpress_1 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[18] = [wordpress_1 : change state from Template to Configured]
 Plan[19] = [wordpress_1 : invoke method Httpd.get_documentRoot of httpd]
 Plan[20] = [wordpress_1 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[21] = [wordpress_1 : change state from Configured to Active]
 Plan[22] = [wordpress_2 : change state from NotInstalled to Installed]
 Plan[23] = [wordpress_2 : change state from Installed to Template]
 Plan[24] = [wordpress_2 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[25] = [wordpress_2 : change state from Template to Configured]
 Plan[26] = [wordpress_2 : invoke method Httpd.get_documentRoot of httpd]
 Plan[27] = [wordpress_2 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[28] = [wordpress_2 : change state from Configured to Active]
 Plan[29] = [wordpress_3 : change state from NotInstalled to Installed]
 Plan[30] = [wordpress_3 : change state from Installed to Template]
 Plan[31] = [wordpress_3 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[32] = [wordpress_3 : change state from Template to Configured]
 Plan[33] = [wordpress_3 : invoke method Httpd.get_documentRoot of httpd]
 Plan[34] = [wordpress_3 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[35] = [wordpress_3 : change state from Configured to Active]
Vertex popped: mysql (Active,D)
STACK = 
varnish (C,NotInstalled) | 
Deal with return/red edges
Current vertex is final: we add a Del action to the plan.
Vertex removed: mysql (Active,D)

*********************** Internal loop iteration j = 26
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
 Plan[16] = [wordpress_1 : change state from Installed to Template]
 Plan[17] = [wordpress_1 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[18] = [wordpress_1 : change state from Template to Configured]
 Plan[19] = [wordpress_1 : invoke method Httpd.get_documentRoot of httpd]
 Plan[20] = [wordpress_1 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[21] = [wordpress_1 : change state from Configured to Active]
 Plan[22] = [wordpress_2 : change state from NotInstalled to Installed]
 Plan[23] = [wordpress_2 : change state from Installed to Template]
 Plan[24] = [wordpress_2 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[25] = [wordpress_2 : change state from Template to Configured]
 Plan[26] = [wordpress_2 : invoke method Httpd.get_documentRoot of httpd]
 Plan[27] = [wordpress_2 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[28] = [wordpress_2 : change state from Configured to Active]
 Plan[29] = [wordpress_3 : change state from NotInstalled to Installed]
 Plan[30] = [wordpress_3 : change state from Installed to Template]
 Plan[31] = [wordpress_3 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[32] = [wordpress_3 : change state from Template to Configured]
 Plan[33] = [wordpress_3 : invoke method Httpd.get_documentRoot of httpd]
 Plan[34] = [wordpress_3 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[35] = [wordpress_3 : change state from Configured to Active]
 Plan[36] = [mysql : stop]
Vertex popped: varnish (C,NotInstalled)
STACK = 
[]
Deal with successor vertex.
INST Edge: PUSH vertex: varnish (NotInstalled,Installed)
STACK = 
varnish (NotInstalled,Installed) | 
Vertex removed: varnish (C,NotInstalled)

*********************** Internal loop iteration j = 27
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
 Plan[16] = [wordpress_1 : change state from Installed to Template]
 Plan[17] = [wordpress_1 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[18] = [wordpress_1 : change state from Template to Configured]
 Plan[19] = [wordpress_1 : invoke method Httpd.get_documentRoot of httpd]
 Plan[20] = [wordpress_1 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[21] = [wordpress_1 : change state from Configured to Active]
 Plan[22] = [wordpress_2 : change state from NotInstalled to Installed]
 Plan[23] = [wordpress_2 : change state from Installed to Template]
 Plan[24] = [wordpress_2 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[25] = [wordpress_2 : change state from Template to Configured]
 Plan[26] = [wordpress_2 : invoke method Httpd.get_documentRoot of httpd]
 Plan[27] = [wordpress_2 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[28] = [wordpress_2 : change state from Configured to Active]
 Plan[29] = [wordpress_3 : change state from NotInstalled to Installed]
 Plan[30] = [wordpress_3 : change state from Installed to Template]
 Plan[31] = [wordpress_3 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[32] = [wordpress_3 : change state from Template to Configured]
 Plan[33] = [wordpress_3 : invoke method Httpd.get_documentRoot of httpd]
 Plan[34] = [wordpress_3 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[35] = [wordpress_3 : change state from Configured to Active]
 Plan[36] = [mysql : stop]
Vertex popped: varnish (NotInstalled,Installed)
STACK = 
[]
It's an intermediate vertex => add action [varnish : change state from NotInstalled to Installed] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: varnish (Installed,Configured)
STACK = 
varnish (Installed,Configured) | 
Vertex removed: varnish (NotInstalled,Installed)

*********************** Internal loop iteration j = 28
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
 Plan[16] = [wordpress_1 : change state from Installed to Template]
 Plan[17] = [wordpress_1 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[18] = [wordpress_1 : change state from Template to Configured]
 Plan[19] = [wordpress_1 : invoke method Httpd.get_documentRoot of httpd]
 Plan[20] = [wordpress_1 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[21] = [wordpress_1 : change state from Configured to Active]
 Plan[22] = [wordpress_2 : change state from NotInstalled to Installed]
 Plan[23] = [wordpress_2 : change state from Installed to Template]
 Plan[24] = [wordpress_2 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[25] = [wordpress_2 : change state from Template to Configured]
 Plan[26] = [wordpress_2 : invoke method Httpd.get_documentRoot of httpd]
 Plan[27] = [wordpress_2 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[28] = [wordpress_2 : change state from Configured to Active]
 Plan[29] = [wordpress_3 : change state from NotInstalled to Installed]
 Plan[30] = [wordpress_3 : change state from Installed to Template]
 Plan[31] = [wordpress_3 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[32] = [wordpress_3 : change state from Template to Configured]
 Plan[33] = [wordpress_3 : invoke method Httpd.get_documentRoot of httpd]
 Plan[34] = [wordpress_3 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[35] = [wordpress_3 : change state from Configured to Active]
 Plan[36] = [mysql : stop]
 Plan[37] = [varnish : change state from NotInstalled to Installed]
Vertex popped: varnish (Installed,Configured)
STACK = 
[]
It's an intermediate vertex => add action [varnish : change state from Installed to Configured] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: varnish (Configured,Active)
STACK = 
varnish (Configured,Active) | 
Vertex removed: varnish (Installed,Configured)

*********************** Internal loop iteration j = 29
Plan BEFORE: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
 Plan[16] = [wordpress_1 : change state from Installed to Template]
 Plan[17] = [wordpress_1 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[18] = [wordpress_1 : change state from Template to Configured]
 Plan[19] = [wordpress_1 : invoke method Httpd.get_documentRoot of httpd]
 Plan[20] = [wordpress_1 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[21] = [wordpress_1 : change state from Configured to Active]
 Plan[22] = [wordpress_2 : change state from NotInstalled to Installed]
 Plan[23] = [wordpress_2 : change state from Installed to Template]
 Plan[24] = [wordpress_2 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[25] = [wordpress_2 : change state from Template to Configured]
 Plan[26] = [wordpress_2 : invoke method Httpd.get_documentRoot of httpd]
 Plan[27] = [wordpress_2 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[28] = [wordpress_2 : change state from Configured to Active]
 Plan[29] = [wordpress_3 : change state from NotInstalled to Installed]
 Plan[30] = [wordpress_3 : change state from Installed to Template]
 Plan[31] = [wordpress_3 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[32] = [wordpress_3 : change state from Template to Configured]
 Plan[33] = [wordpress_3 : invoke method Httpd.get_documentRoot of httpd]
 Plan[34] = [wordpress_3 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[35] = [wordpress_3 : change state from Configured to Active]
 Plan[36] = [mysql : stop]
 Plan[37] = [varnish : change state from NotInstalled to Installed]
 Plan[38] = [varnish : invoke method /mbs/Wordpress-3/Active/get_website of wordpress_3]
 Plan[39] = [varnish : invoke method /mbs/Wordpress-2/Active/get_website of wordpress_2]
 Plan[40] = [varnish : invoke method /mbs/Wordpress-1/Active/get_website of wordpress_1]
 Plan[41] = [varnish : change state from Installed to Configured]
Vertex popped: varnish (Configured,Active)
STACK = 
[]
It's an intermediate vertex => add action [varnish : change state from Configured to Active] to the plan.
Deal with go/blue edges
Deal with return/red edges
RETURN Edge: PUSH vertex: wordpress_1 (Active,D)
STACK = 
wordpress_1 (Active,D) | 
RETURN Edge: PUSH vertex: wordpress_2 (Active,D)
STACK = 
wordpress_2 (Active,D) | wordpress_1 (Active,D) | 
RETURN Edge: PUSH vertex: wordpress_3 (Active,D)
STACK = 
wordpress_3 (Active,D) | wordpress_2 (Active,D) | wordpress_1 (Active,D) | 
Deal with successor vertex.
INST Edge: PUSH vertex: varnish (Active,D)
STACK = 
varnish (Active,D) | wordpress_3 (Active,D) | wordpress_2 (Active,D) | wordpress_1 (Active,D) | 
Target has been REACHED.
Vertex removed: varnish (Configured,Active)

The computed PLAN is: 
 Plan[1] = [Create instance varnish:Varnish]
 Plan[2] = [Create instance wordpress_3:Wordpress_3]
 Plan[3] = [Create instance wordpress_2:Wordpress_2]
 Plan[4] = [Create instance wordpress_1:Wordpress_1]
 Plan[5] = [Create instance httpd:Httpd]
 Plan[6] = [Create instance mysql:Mysql]
 Plan[7] = [mysql : change state from NotInstalled to Installed]
 Plan[8] = [mysql : change state from Installed to SetRootPassword]
 Plan[9] = [mysql : change state from SetRootPassword to Configured]
 Plan[10] = [mysql : change state from Configured to Active.ActiveOnMBS]
 Plan[11] = [mysql : change state from Active.ActiveOnMBS to Active]
 Plan[12] = [httpd : change state from NotInstalled to Installed]
 Plan[13] = [httpd : change state from Installed to Configured]
 Plan[14] = [httpd : change state from Configured to Active]
 Plan[15] = [wordpress_1 : change state from NotInstalled to Installed]
 Plan[16] = [wordpress_1 : change state from Installed to Template]
 Plan[17] = [wordpress_1 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[18] = [wordpress_1 : change state from Template to Configured]
 Plan[19] = [wordpress_1 : invoke method Httpd.get_documentRoot of httpd]
 Plan[20] = [wordpress_1 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[21] = [wordpress_1 : change state from Configured to Active]
 Plan[22] = [wordpress_2 : change state from NotInstalled to Installed]
 Plan[23] = [wordpress_2 : change state from Installed to Template]
 Plan[24] = [wordpress_2 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[25] = [wordpress_2 : change state from Template to Configured]
 Plan[26] = [wordpress_2 : invoke method Httpd.get_documentRoot of httpd]
 Plan[27] = [wordpress_2 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[28] = [wordpress_2 : change state from Configured to Active]
 Plan[29] = [wordpress_3 : change state from NotInstalled to Installed]
 Plan[30] = [wordpress_3 : change state from Installed to Template]
 Plan[31] = [wordpress_3 : invoke method /mbs/Mysql/Active/addDatabase of mysql]
 Plan[32] = [wordpress_3 : change state from Template to Configured]
 Plan[33] = [wordpress_3 : invoke method Httpd.get_documentRoot of httpd]
 Plan[34] = [wordpress_3 : invoke method /mbs/Httpd/Active/start of httpd]
 Plan[35] = [wordpress_3 : change state from Configured to Active]
 Plan[36] = [mysql : stop]
 Plan[37] = [varnish : change state from NotInstalled to Installed]
 Plan[38] = [varnish : invoke method /mbs/Wordpress-3/Active/get_website of wordpress_3]
 Plan[39] = [varnish : invoke method /mbs/Wordpress-2/Active/get_website of wordpress_2]
 Plan[40] = [varnish : invoke method /mbs/Wordpress-1/Active/get_website of wordpress_1]
 Plan[41] = [varnish : change state from Installed to Configured]
 Plan[42] = [varnish : change state from Configured to Active]
