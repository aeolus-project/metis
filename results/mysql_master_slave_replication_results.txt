
We generate the FULL G-GRAPH: 

Generation nr.0: <Slave,Uninst>; <Master,Uninst>; <Application,Uninst>
Generation nr.1: <Application,Uninst>_1; <Master,Uninst>_1; <Slave,Uninst>_1; <Slave,Inst>; <Master,Inst>
Generation nr.2: <Master,Inst>_1; <Slave,Inst>_1; <Slave,Uninst>_2; <Master,Uninst>_2; <Application,Uninst>_2; <Master,Serving>
Generation nr.3: <Master,Serving>_1; <Application,Uninst>_3; <Master,Uninst>_3; <Slave,Uninst>_3; <Slave,Inst>_2; <Master,Inst>_2; <Master,Auth>
Generation nr.4: <Master,Auth>_1; <Master,Inst>_3; <Slave,Inst>_3; <Slave,Uninst>_4; <Master,Uninst>_4; <Application,Uninst>_4; <Master,Serving>_2; <Master,Dump>
Generation nr.5: <Master,Dump>_1; <Master,Serving>_3; <Application,Uninst>_5; <Master,Uninst>_5; <Slave,Uninst>_5; <Slave,Inst>_4; <Master,Inst>_4; <Master,Auth>_2; <Slave,ReceiveDump>; <Master,MasterServing>
Generation nr.6: <Master,MasterServing>_1; <Slave,ReceiveDump>_1; <Master,Auth>_3; <Master,Inst>_5; <Slave,Inst>_5; <Slave,Uninst>_6; <Master,Uninst>_6; <Application,Uninst>_6; <Master,Serving>_4; <Master,Dump>_2; <Slave,Serving>
Generation nr.7: <Slave,Serving>_1; <Master,Dump>_3; <Master,Serving>_5; <Application,Uninst>_7; <Master,Uninst>_7; <Slave,Uninst>_7; <Slave,Inst>_6; <Master,Inst>_6; <Master,Auth>_4; <Slave,ReceiveDump>_2; <Master,MasterServing>_2; <Application,Inst>

BOTTOM-UP VISIT of the G-graph. For every node we choose origin node and providers.
Total requires: mysql | s_mysql
fanIn[<Master,MasterServing>_1] := 1
fanIn[<Slave,ReceiveDump>_1] := 0
fanIn[<Master,Auth>_3] := 0
fanIn[<Master,Inst>_5] := 0
fanIn[<Slave,Inst>_5] := 0
fanIn[<Slave,Uninst>_6] := 0
fanIn[<Master,Uninst>_6] := 0
fanIn[<Application,Uninst>_6] := 0
fanIn[<Master,Serving>_4] := 1
fanIn[<Master,Dump>_2] := 0
fanIn[<Slave,Serving>] := 1
Nodes with fanIn values:
<Master,MasterServing>_1, fanIn = 1 | <Slave,ReceiveDump>_1, fanIn = 0 | <Master,Auth>_3, fanIn = 0 | <Master,Inst>_5, fanIn = 0 | <Slave,Inst>_5, fanIn = 0 | <Slave,Uninst>_6, fanIn = 0 | <Master,Uninst>_6, fanIn = 0 | <Application,Uninst>_6, fanIn = 0 | <Master,Serving>_4, fanIn = 1 | <Master,Dump>_2, fanIn = 0 | <Slave,Serving>, fanIn = 1

 ----------------- BOTTOM-UP VISIT LEVEL nr. 7 CYCLE execution nr. 1 ----------------
node to be examined: <Application,Inst>
<Application,Inst> is NOT an initial node => need to look for parent
<Application,Uninst>_6 chosen with max fanIn value
origin node chosen: <Application,Uninst>_6
<Application,Inst> is NOT a copy => must take care of providers
Update fanIn : fanIn[<Master,MasterServing>_1] <- 0 (due to provide mysql)
Update fanIn : fanIn[<Master,Serving>_4] <- 0 (due to provide mysql)
<Slave,Serving> chosen with max fanIn value
Update fanIn : fanIn[<Slave,Serving>] <- 0 (due to provide s_mysql)
list of chosen providers: <Master,MasterServing>_1 <Slave,Serving> 
current generation: Generation nr.7: <Application,Inst>
next working set, at level nr.6 : { <Master,MasterServing>_1 <Slave,Serving> <Application,Uninst>_6  }
Nodes with fanIn values:
<Master,MasterServing>_1, fanIn = 0 | <Slave,ReceiveDump>_1, fanIn = 0 | <Master,Auth>_3, fanIn = 0 | <Master,Inst>_5, fanIn = 0 | <Slave,Inst>_5, fanIn = 0 | <Slave,Uninst>_6, fanIn = 0 | <Master,Uninst>_6, fanIn = 0 | <Application,Uninst>_6, fanIn = 0 | <Master,Serving>_4, fanIn = 0 | <Master,Dump>_2, fanIn = 0 | <Slave,Serving>, fanIn = 0
Total requires: 
fanIn[<Master,Dump>_1] := 0
fanIn[<Master,Serving>_3] := 0
fanIn[<Application,Uninst>_5] := 0
fanIn[<Master,Uninst>_5] := 0
fanIn[<Slave,Uninst>_5] := 0
fanIn[<Slave,Inst>_4] := 0
fanIn[<Master,Inst>_4] := 0
fanIn[<Master,Auth>_2] := 0
fanIn[<Slave,ReceiveDump>] := 0
fanIn[<Master,MasterServing>] := 0
Nodes with fanIn values:
<Master,Dump>_1, fanIn = 0 | <Master,Serving>_3, fanIn = 0 | <Application,Uninst>_5, fanIn = 0 | <Master,Uninst>_5, fanIn = 0 | <Slave,Uninst>_5, fanIn = 0 | <Slave,Inst>_4, fanIn = 0 | <Master,Inst>_4, fanIn = 0 | <Master,Auth>_2, fanIn = 0 | <Slave,ReceiveDump>, fanIn = 0 | <Master,MasterServing>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 6 CYCLE execution nr. 1 ----------------
node to be examined: <Master,MasterServing>_1
<Master,MasterServing>_1 is NOT an initial node => need to look for parent
<Master,MasterServing> chosen as a copy
origin node chosen: <Master,MasterServing>
current generation: Generation nr.6: <Master,MasterServing>_1
next working set, at level nr.5 : { <Master,MasterServing>  }
Nodes with fanIn values:
<Master,Dump>_1, fanIn = 0 | <Master,Serving>_3, fanIn = 0 | <Application,Uninst>_5, fanIn = 0 | <Master,Uninst>_5, fanIn = 0 | <Slave,Uninst>_5, fanIn = 0 | <Slave,Inst>_4, fanIn = 0 | <Master,Inst>_4, fanIn = 0 | <Master,Auth>_2, fanIn = 0 | <Slave,ReceiveDump>, fanIn = 0 | <Master,MasterServing>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 6 CYCLE execution nr. 2 ----------------
node to be examined: <Slave,Serving>
<Slave,Serving> is NOT an initial node => need to look for parent
<Slave,ReceiveDump> chosen with max fanIn value
origin node chosen: <Slave,ReceiveDump>
<Slave,Serving> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.6: <Slave,Serving>; <Master,MasterServing>_1
next working set, at level nr.5 : { <Slave,ReceiveDump> <Master,MasterServing>  }
Nodes with fanIn values:
<Master,Dump>_1, fanIn = 0 | <Master,Serving>_3, fanIn = 0 | <Application,Uninst>_5, fanIn = 0 | <Master,Uninst>_5, fanIn = 0 | <Slave,Uninst>_5, fanIn = 0 | <Slave,Inst>_4, fanIn = 0 | <Master,Inst>_4, fanIn = 0 | <Master,Auth>_2, fanIn = 0 | <Slave,ReceiveDump>, fanIn = 0 | <Master,MasterServing>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 6 CYCLE execution nr. 3 ----------------
node to be examined: <Application,Uninst>_6
<Application,Uninst>_6 is an initial node => no need to look for parent and providers
current generation: Generation nr.6: <Application,Uninst>_6; <Slave,Serving>; <Master,MasterServing>_1
next working set, at level nr.5 : { <Application,Uninst> <Slave,ReceiveDump> <Master,MasterServing>  }
Nodes with fanIn values:
<Master,Dump>_1, fanIn = 0 | <Master,Serving>_3, fanIn = 0 | <Application,Uninst>_5, fanIn = 0 | <Master,Uninst>_5, fanIn = 0 | <Slave,Uninst>_5, fanIn = 0 | <Slave,Inst>_4, fanIn = 0 | <Master,Inst>_4, fanIn = 0 | <Master,Auth>_2, fanIn = 0 | <Slave,ReceiveDump>, fanIn = 0 | <Master,MasterServing>, fanIn = 0
Total requires: dump
fanIn[<Master,Auth>_1] := 0
fanIn[<Master,Inst>_3] := 0
fanIn[<Slave,Inst>_3] := 0
fanIn[<Slave,Uninst>_4] := 0
fanIn[<Master,Uninst>_4] := 0
fanIn[<Application,Uninst>_4] := 0
fanIn[<Master,Serving>_2] := 0
fanIn[<Master,Dump>] := 1
Nodes with fanIn values:
<Master,Auth>_1, fanIn = 0 | <Master,Inst>_3, fanIn = 0 | <Slave,Inst>_3, fanIn = 0 | <Slave,Uninst>_4, fanIn = 0 | <Master,Uninst>_4, fanIn = 0 | <Application,Uninst>_4, fanIn = 0 | <Master,Serving>_2, fanIn = 0 | <Master,Dump>, fanIn = 1

 ----------------- BOTTOM-UP VISIT LEVEL nr. 5 CYCLE execution nr. 1 ----------------
node to be examined: <Application,Uninst>
<Application,Uninst> is an initial node => no need to look for parent and providers
current generation: Generation nr.5: <Application,Uninst>
next working set, at level nr.4 : { <Application,Uninst>  }
Nodes with fanIn values:
<Master,Auth>_1, fanIn = 0 | <Master,Inst>_3, fanIn = 0 | <Slave,Inst>_3, fanIn = 0 | <Slave,Uninst>_4, fanIn = 0 | <Master,Uninst>_4, fanIn = 0 | <Application,Uninst>_4, fanIn = 0 | <Master,Serving>_2, fanIn = 0 | <Master,Dump>, fanIn = 1

 ----------------- BOTTOM-UP VISIT LEVEL nr. 5 CYCLE execution nr. 2 ----------------
node to be examined: <Slave,ReceiveDump>
<Slave,ReceiveDump> is NOT an initial node => need to look for parent
<Slave,Inst>_3 chosen with max fanIn value
origin node chosen: <Slave,Inst>_3
<Slave,ReceiveDump> is NOT a copy => must take care of providers
<Master,Dump> chosen with max fanIn value
Update fanIn : fanIn[<Master,Dump>] <- 0 (due to provide dump)
list of chosen providers: <Master,Dump> 
current generation: Generation nr.5: <Slave,ReceiveDump>; <Application,Uninst>
next working set, at level nr.4 : { <Master,Dump> <Slave,Inst>_3 <Application,Uninst>  }
Nodes with fanIn values:
<Master,Auth>_1, fanIn = 0 | <Master,Inst>_3, fanIn = 0 | <Slave,Inst>_3, fanIn = 0 | <Slave,Uninst>_4, fanIn = 0 | <Master,Uninst>_4, fanIn = 0 | <Application,Uninst>_4, fanIn = 0 | <Master,Serving>_2, fanIn = 0 | <Master,Dump>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 5 CYCLE execution nr. 3 ----------------
node to be examined: <Master,MasterServing>
<Master,MasterServing> is NOT an initial node => need to look for parent
<Master,Dump> chosen with max fanIn value
origin node chosen: <Master,Dump>
<Master,MasterServing> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.5: <Master,MasterServing>; <Slave,ReceiveDump>; <Application,Uninst>
next working set, at level nr.4 : { <Master,Dump> <Slave,Inst>_3 <Application,Uninst>  }
Nodes with fanIn values:
<Master,Auth>_1, fanIn = 0 | <Master,Inst>_3, fanIn = 0 | <Slave,Inst>_3, fanIn = 0 | <Slave,Uninst>_4, fanIn = 0 | <Master,Uninst>_4, fanIn = 0 | <Application,Uninst>_4, fanIn = 0 | <Master,Serving>_2, fanIn = 0 | <Master,Dump>, fanIn = 0
Total requires: 
fanIn[<Master,Serving>_1] := 0
fanIn[<Application,Uninst>_3] := 0
fanIn[<Master,Uninst>_3] := 0
fanIn[<Slave,Uninst>_3] := 0
fanIn[<Slave,Inst>_2] := 0
fanIn[<Master,Inst>_2] := 0
fanIn[<Master,Auth>] := 0
Nodes with fanIn values:
<Master,Serving>_1, fanIn = 0 | <Application,Uninst>_3, fanIn = 0 | <Master,Uninst>_3, fanIn = 0 | <Slave,Uninst>_3, fanIn = 0 | <Slave,Inst>_2, fanIn = 0 | <Master,Inst>_2, fanIn = 0 | <Master,Auth>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 4 CYCLE execution nr. 1 ----------------
node to be examined: <Master,Dump>
<Master,Dump> is NOT an initial node => need to look for parent
<Master,Auth> chosen with max fanIn value
origin node chosen: <Master,Auth>
<Master,Dump> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.4: <Master,Dump>
next working set, at level nr.3 : { <Master,Auth>  }
Nodes with fanIn values:
<Master,Serving>_1, fanIn = 0 | <Application,Uninst>_3, fanIn = 0 | <Master,Uninst>_3, fanIn = 0 | <Slave,Uninst>_3, fanIn = 0 | <Slave,Inst>_2, fanIn = 0 | <Master,Inst>_2, fanIn = 0 | <Master,Auth>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 4 CYCLE execution nr. 2 ----------------
node to be examined: <Slave,Inst>_3
<Slave,Inst>_3 is NOT an initial node => need to look for parent
<Slave,Inst>_2 chosen as a copy
origin node chosen: <Slave,Inst>_2
current generation: Generation nr.4: <Slave,Inst>_3; <Master,Dump>
next working set, at level nr.3 : { <Slave,Inst>_2 <Master,Auth>  }
Nodes with fanIn values:
<Master,Serving>_1, fanIn = 0 | <Application,Uninst>_3, fanIn = 0 | <Master,Uninst>_3, fanIn = 0 | <Slave,Uninst>_3, fanIn = 0 | <Slave,Inst>_2, fanIn = 0 | <Master,Inst>_2, fanIn = 0 | <Master,Auth>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 4 CYCLE execution nr. 3 ----------------
node to be examined: <Application,Uninst>
<Application,Uninst> is an initial node => no need to look for parent and providers
current generation: Generation nr.4: <Application,Uninst>; <Slave,Inst>_3; <Master,Dump>
next working set, at level nr.3 : { <Application,Uninst> <Slave,Inst>_2 <Master,Auth>  }
Nodes with fanIn values:
<Master,Serving>_1, fanIn = 0 | <Application,Uninst>_3, fanIn = 0 | <Master,Uninst>_3, fanIn = 0 | <Slave,Uninst>_3, fanIn = 0 | <Slave,Inst>_2, fanIn = 0 | <Master,Inst>_2, fanIn = 0 | <Master,Auth>, fanIn = 0
Total requires: slave_ip
fanIn[<Master,Inst>_1] := 0
fanIn[<Slave,Inst>_1] := 1
fanIn[<Slave,Uninst>_2] := 0
fanIn[<Master,Uninst>_2] := 0
fanIn[<Application,Uninst>_2] := 0
fanIn[<Master,Serving>] := 0
Nodes with fanIn values:
<Master,Inst>_1, fanIn = 0 | <Slave,Inst>_1, fanIn = 1 | <Slave,Uninst>_2, fanIn = 0 | <Master,Uninst>_2, fanIn = 0 | <Application,Uninst>_2, fanIn = 0 | <Master,Serving>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 3 CYCLE execution nr. 1 ----------------
node to be examined: <Application,Uninst>
<Application,Uninst> is an initial node => no need to look for parent and providers
current generation: Generation nr.3: <Application,Uninst>
next working set, at level nr.2 : { <Application,Uninst>  }
Nodes with fanIn values:
<Master,Inst>_1, fanIn = 0 | <Slave,Inst>_1, fanIn = 1 | <Slave,Uninst>_2, fanIn = 0 | <Master,Uninst>_2, fanIn = 0 | <Application,Uninst>_2, fanIn = 0 | <Master,Serving>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 3 CYCLE execution nr. 2 ----------------
node to be examined: <Slave,Inst>_2
<Slave,Inst>_2 is NOT an initial node => need to look for parent
<Slave,Inst>_1 chosen with max fanIn value
origin node chosen: <Slave,Inst>_1
Update fanIn : fanIn[<Slave,Inst>_1] <- 0 (due to provide slave_ip)
current generation: Generation nr.3: <Slave,Inst>_2; <Application,Uninst>
next working set, at level nr.2 : { <Slave,Inst>_1 <Application,Uninst>  }
Nodes with fanIn values:
<Master,Inst>_1, fanIn = 0 | <Slave,Inst>_1, fanIn = 0 | <Slave,Uninst>_2, fanIn = 0 | <Master,Uninst>_2, fanIn = 0 | <Application,Uninst>_2, fanIn = 0 | <Master,Serving>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 3 CYCLE execution nr. 3 ----------------
node to be examined: <Master,Auth>
<Master,Auth> is NOT an initial node => need to look for parent
<Master,Serving> chosen with max fanIn value
origin node chosen: <Master,Serving>
<Master,Auth> is NOT a copy => must take care of providers
<Slave,Inst>_1 chosen with max fanIn value
list of chosen providers: <Slave,Inst>_1 
current generation: Generation nr.3: <Master,Auth>; <Slave,Inst>_2; <Application,Uninst>
next working set, at level nr.2 : { <Slave,Inst>_1 <Master,Serving> <Application,Uninst>  }
Nodes with fanIn values:
<Master,Inst>_1, fanIn = 0 | <Slave,Inst>_1, fanIn = 0 | <Slave,Uninst>_2, fanIn = 0 | <Master,Uninst>_2, fanIn = 0 | <Application,Uninst>_2, fanIn = 0 | <Master,Serving>, fanIn = 0
Total requires: 
fanIn[<Application,Uninst>_1] := 0
fanIn[<Master,Uninst>_1] := 0
fanIn[<Slave,Uninst>_1] := 0
fanIn[<Slave,Inst>] := 0
fanIn[<Master,Inst>] := 0
Nodes with fanIn values:
<Application,Uninst>_1, fanIn = 0 | <Master,Uninst>_1, fanIn = 0 | <Slave,Uninst>_1, fanIn = 0 | <Slave,Inst>, fanIn = 0 | <Master,Inst>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 2 CYCLE execution nr. 1 ----------------
node to be examined: <Slave,Inst>_1
<Slave,Inst>_1 is NOT an initial node => need to look for parent
<Slave,Inst> chosen as a copy
origin node chosen: <Slave,Inst>
current generation: Generation nr.2: <Slave,Inst>_1
next working set, at level nr.1 : { <Slave,Inst>  }
Nodes with fanIn values:
<Application,Uninst>_1, fanIn = 0 | <Master,Uninst>_1, fanIn = 0 | <Slave,Uninst>_1, fanIn = 0 | <Slave,Inst>, fanIn = 0 | <Master,Inst>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 2 CYCLE execution nr. 2 ----------------
node to be examined: <Master,Serving>
<Master,Serving> is NOT an initial node => need to look for parent
<Master,Inst> chosen with max fanIn value
origin node chosen: <Master,Inst>
<Master,Serving> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.2: <Master,Serving>; <Slave,Inst>_1
next working set, at level nr.1 : { <Master,Inst> <Slave,Inst>  }
Nodes with fanIn values:
<Application,Uninst>_1, fanIn = 0 | <Master,Uninst>_1, fanIn = 0 | <Slave,Uninst>_1, fanIn = 0 | <Slave,Inst>, fanIn = 0 | <Master,Inst>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 2 CYCLE execution nr. 3 ----------------
node to be examined: <Application,Uninst>
<Application,Uninst> is an initial node => no need to look for parent and providers
current generation: Generation nr.2: <Application,Uninst>; <Master,Serving>; <Slave,Inst>_1
next working set, at level nr.1 : { <Application,Uninst> <Master,Inst> <Slave,Inst>  }
Nodes with fanIn values:
<Application,Uninst>_1, fanIn = 0 | <Master,Uninst>_1, fanIn = 0 | <Slave,Uninst>_1, fanIn = 0 | <Slave,Inst>, fanIn = 0 | <Master,Inst>, fanIn = 0
Total requires: 
fanIn[<Slave,Uninst>] := 0
fanIn[<Master,Uninst>] := 0
fanIn[<Application,Uninst>] := 0
Nodes with fanIn values:
<Slave,Uninst>, fanIn = 0 | <Master,Uninst>, fanIn = 0 | <Application,Uninst>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 1 CYCLE execution nr. 1 ----------------
node to be examined: <Application,Uninst>
<Application,Uninst> is an initial node => no need to look for parent and providers
current generation: Generation nr.1: <Application,Uninst>
next working set, at level nr.0 : { <Application,Uninst>  }
Nodes with fanIn values:
<Slave,Uninst>, fanIn = 0 | <Master,Uninst>, fanIn = 0 | <Application,Uninst>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 1 CYCLE execution nr. 2 ----------------
node to be examined: <Master,Inst>
<Master,Inst> is NOT an initial node => need to look for parent
<Master,Uninst> chosen with max fanIn value
origin node chosen: <Master,Uninst>
<Master,Inst> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.1: <Master,Inst>; <Application,Uninst>
next working set, at level nr.0 : { <Master,Uninst> <Application,Uninst>  }
Nodes with fanIn values:
<Slave,Uninst>, fanIn = 0 | <Master,Uninst>, fanIn = 0 | <Application,Uninst>, fanIn = 0

 ----------------- BOTTOM-UP VISIT LEVEL nr. 1 CYCLE execution nr. 3 ----------------
node to be examined: <Slave,Inst>
<Slave,Inst> is NOT an initial node => need to look for parent
<Slave,Uninst> chosen with max fanIn value
origin node chosen: <Slave,Uninst>
<Slave,Inst> is NOT a copy => must take care of providers
list of chosen providers: 
current generation: Generation nr.1: <Slave,Inst>; <Master,Inst>; <Application,Uninst>
next working set, at level nr.0 : { <Slave,Uninst> <Master,Uninst> <Application,Uninst>  }
Nodes with fanIn values:
<Slave,Uninst>, fanIn = 0 | <Master,Uninst>, fanIn = 0 | <Application,Uninst>, fanIn = 0

LINEARIZATION phase

The linearized paths are the following:

<Master,Uninst> <Master,Inst> <Master,Serving> <Master,Auth> <Master,Dump> <Master,MasterServing> 

<Slave,Uninst> <Slave,Inst> <Slave,ReceiveDump> <Slave,Serving> 

<Application,Uninst> <Application,Inst> 


The INSTANCE LINES are the following:

Instance application :
application (C,Uninst) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Application,Uninst>--> application (Uninst,Inst)

application (Uninst,Inst) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Application,Inst>--> application (Inst,D)

application (Inst,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Instance slave :
slave (C,Uninst) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Slave,Uninst>--> slave (Uninst,Inst)

slave (Uninst,Inst) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Slave,Inst>--> slave (Inst,ReceiveDump)

slave (Inst,ReceiveDump) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Slave,ReceiveDump>--> slave (ReceiveDump,Serving)

slave (ReceiveDump,Serving) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Slave,Serving>--> slave (Serving,D)

slave (Serving,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Instance master :
master (C,Uninst) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Master,Uninst>--> master (Uninst,Inst)

master (Uninst,Inst) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Master,Inst>--> master (Inst,Serving)

master (Inst,Serving) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Master,Serving>--> master (Serving,Auth)

master (Serving,Auth) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Master,Auth>--> master (Auth,Dump)

master (Auth,Dump) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Master,Dump>--> master (Dump,MasterServing)

master (Dump,MasterServing) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Master,MasterServing>--> master (MasterServing,D)

master (MasterServing,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Next we ADD GO (blue) and RETURN (red) EDGES.

Instance application :
application (C,Uninst) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Application,Uninst>--> application (Uninst,Inst)

application (Uninst,Inst) nr.IN-edges =  3
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Application,Inst>--> application (Inst,D)

application (Inst,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: ---mysql---> master (MasterServing,D); ---s_mysql---> slave (Serving,D)
 INST EDGE: { }

Instance slave :
slave (C,Uninst) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Slave,Uninst>--> slave (Uninst,Inst)

slave (Uninst,Inst) nr.IN-edges =  1
 GO EDGES: ---slave_ip---> master (Serving,Auth)
 RETURN EDGES: 
 INST EDGE: --<Slave,Inst>--> slave (Inst,ReceiveDump)

slave (Inst,ReceiveDump) nr.IN-edges =  3
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Slave,ReceiveDump>--> slave (ReceiveDump,Serving)

slave (ReceiveDump,Serving) nr.IN-edges =  1
 GO EDGES: ---s_mysql---> application (Uninst,Inst)
 RETURN EDGES: ---dump---> master (Dump,MasterServing)
 INST EDGE: --<Slave,Serving>--> slave (Serving,D)

slave (Serving,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Instance master :
master (C,Uninst) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Master,Uninst>--> master (Uninst,Inst)

master (Uninst,Inst) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Master,Inst>--> master (Inst,Serving)

master (Inst,Serving) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Master,Serving>--> master (Serving,Auth)

master (Serving,Auth) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Master,Auth>--> master (Auth,Dump)

master (Auth,Dump) nr.IN-edges =  1
 GO EDGES: ---dump---> slave (Inst,ReceiveDump)
 RETURN EDGES: ---slave_ip---> slave (Inst,ReceiveDump)
 INST EDGE: --<Master,Dump>--> master (Dump,MasterServing)

master (Dump,MasterServing) nr.IN-edges =  2
 GO EDGES: ---mysql---> application (Uninst,Inst)
 RETURN EDGES: 
 INST EDGE: --<Master,MasterServing>--> master (MasterServing,D)

master (MasterServing,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Next we FIX ENCLOSING GO (blue) and RETURN (red) EDGES.
################# Fix enclosing edges for vertex slave (Uninst,Inst) and GO edge ---slave_ip---> master (Serving,Auth)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

################# Fix enclosing edges for vertex slave (ReceiveDump,Serving) and GO edge ---s_mysql---> application (Uninst,Inst)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

################# Fix enclosing edges for vertex master (Auth,Dump) and GO edge ---dump---> slave (Inst,ReceiveDump)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

################# Fix enclosing edges for vertex master (Dump,MasterServing) and GO edge ---mysql---> application (Uninst,Inst)
Pairs found from the given vertex: { }
Pairs found from successors of the given vertex: { }
Total set of pairs found: { }

Now the INSTANCE LINES WITH EDGES look like this:

Instance application :
application (C,Uninst) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Application,Uninst>--> application (Uninst,Inst)

application (Uninst,Inst) nr.IN-edges =  3
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Application,Inst>--> application (Inst,D)

application (Inst,D) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: ---mysql---> master (MasterServing,D); ---s_mysql---> slave (Serving,D)
 INST EDGE: { }

Instance slave :
slave (C,Uninst) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Slave,Uninst>--> slave (Uninst,Inst)

slave (Uninst,Inst) nr.IN-edges =  1
 GO EDGES: ---slave_ip---> master (Serving,Auth)
 RETURN EDGES: 
 INST EDGE: --<Slave,Inst>--> slave (Inst,ReceiveDump)

slave (Inst,ReceiveDump) nr.IN-edges =  3
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Slave,ReceiveDump>--> slave (ReceiveDump,Serving)

slave (ReceiveDump,Serving) nr.IN-edges =  1
 GO EDGES: ---s_mysql---> application (Uninst,Inst)
 RETURN EDGES: ---dump---> master (Dump,MasterServing)
 INST EDGE: --<Slave,Serving>--> slave (Serving,D)

slave (Serving,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }

Instance master :
master (C,Uninst) nr.IN-edges =  0
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Master,Uninst>--> master (Uninst,Inst)

master (Uninst,Inst) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Master,Inst>--> master (Inst,Serving)

master (Inst,Serving) nr.IN-edges =  1
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Master,Serving>--> master (Serving,Auth)

master (Serving,Auth) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: --<Master,Auth>--> master (Auth,Dump)

master (Auth,Dump) nr.IN-edges =  1
 GO EDGES: ---dump---> slave (Inst,ReceiveDump)
 RETURN EDGES: ---slave_ip---> slave (Inst,ReceiveDump)
 INST EDGE: --<Master,Dump>--> master (Dump,MasterServing)

master (Dump,MasterServing) nr.IN-edges =  2
 GO EDGES: ---mysql---> application (Uninst,Inst)
 RETURN EDGES: 
 INST EDGE: --<Master,MasterServing>--> master (MasterServing,D)

master (MasterServing,D) nr.IN-edges =  2
 GO EDGES: 
 RETURN EDGES: 
 INST EDGE: { }


----------------------- PLAN SYNTHESIS START -----------------------
Added action [Create instance application:Application] to the plan.
Added action [Create instance slave:Slave] to the plan.
Added action [Create instance master:Master] to the plan.
External loop iteration i = 0

*********************** Internal loop iteration j = 0
Plan BEFORE: 
 Plan[1] = [Create instance application:Application]
 Plan[2] = [Create instance slave:Slave]
 Plan[3] = [Create instance master:Master]
Vertex popped: master (C,Uninst)
STACK = 
slave (C,Uninst) | application (C,Uninst) | 
Deal with successor vertex.
INST Edge: PUSH vertex: master (Uninst,Inst)
STACK = 
master (Uninst,Inst) | slave (C,Uninst) | application (C,Uninst) | 
Vertex removed: master (C,Uninst)

*********************** Internal loop iteration j = 1
Plan BEFORE: 
 Plan[1] = [Create instance application:Application]
 Plan[2] = [Create instance slave:Slave]
 Plan[3] = [Create instance master:Master]
Vertex popped: master (Uninst,Inst)
STACK = 
slave (C,Uninst) | application (C,Uninst) | 
It's an intermediate vertex => add action [master : change state from Uninst to Inst] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: master (Inst,Serving)
STACK = 
master (Inst,Serving) | slave (C,Uninst) | application (C,Uninst) | 
Vertex removed: master (Uninst,Inst)

*********************** Internal loop iteration j = 2
Plan BEFORE: 
 Plan[1] = [Create instance application:Application]
 Plan[2] = [Create instance slave:Slave]
 Plan[3] = [Create instance master:Master]
 Plan[4] = [master : change state from Uninst to Inst]
Vertex popped: master (Inst,Serving)
STACK = 
slave (C,Uninst) | application (C,Uninst) | 
It's an intermediate vertex => add action [master : change state from Inst to Serving] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
Vertex removed: master (Inst,Serving)

*********************** Internal loop iteration j = 3
Plan BEFORE: 
 Plan[1] = [Create instance application:Application]
 Plan[2] = [Create instance slave:Slave]
 Plan[3] = [Create instance master:Master]
 Plan[4] = [master : change state from Uninst to Inst]
 Plan[5] = [master : change state from Inst to Serving]
Vertex popped: slave (C,Uninst)
STACK = 
application (C,Uninst) | 
Deal with successor vertex.
INST Edge: PUSH vertex: slave (Uninst,Inst)
STACK = 
slave (Uninst,Inst) | application (C,Uninst) | 
Vertex removed: slave (C,Uninst)

*********************** Internal loop iteration j = 4
Plan BEFORE: 
 Plan[1] = [Create instance application:Application]
 Plan[2] = [Create instance slave:Slave]
 Plan[3] = [Create instance master:Master]
 Plan[4] = [master : change state from Uninst to Inst]
 Plan[5] = [master : change state from Inst to Serving]
Vertex popped: slave (Uninst,Inst)
STACK = 
application (C,Uninst) | 
It's an intermediate vertex => add action [slave : change state from Uninst to Inst] to the plan.
Deal with go/blue edges
GO Edge: PUSH vertex: master (Serving,Auth)
STACK = 
master (Serving,Auth) | application (C,Uninst) | 
Deal with return/red edges
Deal with successor vertex.
Vertex removed: slave (Uninst,Inst)

*********************** Internal loop iteration j = 5
Plan BEFORE: 
 Plan[1] = [Create instance application:Application]
 Plan[2] = [Create instance slave:Slave]
 Plan[3] = [Create instance master:Master]
 Plan[4] = [master : change state from Uninst to Inst]
 Plan[5] = [master : change state from Inst to Serving]
 Plan[6] = [slave : change state from Uninst to Inst]
Vertex popped: master (Serving,Auth)
STACK = 
application (C,Uninst) | 
It's an intermediate vertex => add action [master : change state from Serving to Auth] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: master (Auth,Dump)
STACK = 
master (Auth,Dump) | application (C,Uninst) | 
Vertex removed: master (Serving,Auth)

*********************** Internal loop iteration j = 6
Plan BEFORE: 
 Plan[1] = [Create instance application:Application]
 Plan[2] = [Create instance slave:Slave]
 Plan[3] = [Create instance master:Master]
 Plan[4] = [master : change state from Uninst to Inst]
 Plan[5] = [master : change state from Inst to Serving]
 Plan[6] = [slave : change state from Uninst to Inst]
 Plan[7] = [master : invoke method slave_ip of slave]
 Plan[8] = [master : change state from Serving to Auth]
Vertex popped: master (Auth,Dump)
STACK = 
application (C,Uninst) | 
It's an intermediate vertex => add action [master : change state from Auth to Dump] to the plan.
Deal with go/blue edges
Deal with return/red edges
RETURN Edge: PUSH vertex: slave (Inst,ReceiveDump)
STACK = 
slave (Inst,ReceiveDump) | application (C,Uninst) | 
Deal with successor vertex.
Vertex removed: master (Auth,Dump)

*********************** Internal loop iteration j = 7
Plan BEFORE: 
 Plan[1] = [Create instance application:Application]
 Plan[2] = [Create instance slave:Slave]
 Plan[3] = [Create instance master:Master]
 Plan[4] = [master : change state from Uninst to Inst]
 Plan[5] = [master : change state from Inst to Serving]
 Plan[6] = [slave : change state from Uninst to Inst]
 Plan[7] = [master : invoke method slave_ip of slave]
 Plan[8] = [master : change state from Serving to Auth]
 Plan[9] = [master : change state from Auth to Dump]
Vertex popped: slave (Inst,ReceiveDump)
STACK = 
application (C,Uninst) | 
It's an intermediate vertex => add action [slave : change state from Inst to ReceiveDump] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: slave (ReceiveDump,Serving)
STACK = 
slave (ReceiveDump,Serving) | application (C,Uninst) | 
Vertex removed: slave (Inst,ReceiveDump)

*********************** Internal loop iteration j = 8
Plan BEFORE: 
 Plan[1] = [Create instance application:Application]
 Plan[2] = [Create instance slave:Slave]
 Plan[3] = [Create instance master:Master]
 Plan[4] = [master : change state from Uninst to Inst]
 Plan[5] = [master : change state from Inst to Serving]
 Plan[6] = [slave : change state from Uninst to Inst]
 Plan[7] = [master : invoke method slave_ip of slave]
 Plan[8] = [master : change state from Serving to Auth]
 Plan[9] = [master : change state from Auth to Dump]
 Plan[10] = [slave : invoke method dump of master]
 Plan[11] = [slave : change state from Inst to ReceiveDump]
Vertex popped: slave (ReceiveDump,Serving)
STACK = 
application (C,Uninst) | 
It's an intermediate vertex => add action [slave : change state from ReceiveDump to Serving] to the plan.
Deal with go/blue edges
Deal with return/red edges
RETURN Edge: PUSH vertex: master (Dump,MasterServing)
STACK = 
master (Dump,MasterServing) | application (C,Uninst) | 
Deal with successor vertex.
Vertex removed: slave (ReceiveDump,Serving)

*********************** Internal loop iteration j = 9
Plan BEFORE: 
 Plan[1] = [Create instance application:Application]
 Plan[2] = [Create instance slave:Slave]
 Plan[3] = [Create instance master:Master]
 Plan[4] = [master : change state from Uninst to Inst]
 Plan[5] = [master : change state from Inst to Serving]
 Plan[6] = [slave : change state from Uninst to Inst]
 Plan[7] = [master : invoke method slave_ip of slave]
 Plan[8] = [master : change state from Serving to Auth]
 Plan[9] = [master : change state from Auth to Dump]
 Plan[10] = [slave : invoke method dump of master]
 Plan[11] = [slave : change state from Inst to ReceiveDump]
 Plan[12] = [slave : change state from ReceiveDump to Serving]
Vertex popped: master (Dump,MasterServing)
STACK = 
application (C,Uninst) | 
It's an intermediate vertex => add action [master : change state from Dump to MasterServing] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
Vertex removed: master (Dump,MasterServing)

*********************** Internal loop iteration j = 10
Plan BEFORE: 
 Plan[1] = [Create instance application:Application]
 Plan[2] = [Create instance slave:Slave]
 Plan[3] = [Create instance master:Master]
 Plan[4] = [master : change state from Uninst to Inst]
 Plan[5] = [master : change state from Inst to Serving]
 Plan[6] = [slave : change state from Uninst to Inst]
 Plan[7] = [master : invoke method slave_ip of slave]
 Plan[8] = [master : change state from Serving to Auth]
 Plan[9] = [master : change state from Auth to Dump]
 Plan[10] = [slave : invoke method dump of master]
 Plan[11] = [slave : change state from Inst to ReceiveDump]
 Plan[12] = [slave : change state from ReceiveDump to Serving]
 Plan[13] = [master : change state from Dump to MasterServing]
Vertex popped: application (C,Uninst)
STACK = 
[]
Deal with successor vertex.
INST Edge: PUSH vertex: application (Uninst,Inst)
STACK = 
application (Uninst,Inst) | 
Vertex removed: application (C,Uninst)

*********************** Internal loop iteration j = 11
Plan BEFORE: 
 Plan[1] = [Create instance application:Application]
 Plan[2] = [Create instance slave:Slave]
 Plan[3] = [Create instance master:Master]
 Plan[4] = [master : change state from Uninst to Inst]
 Plan[5] = [master : change state from Inst to Serving]
 Plan[6] = [slave : change state from Uninst to Inst]
 Plan[7] = [master : invoke method slave_ip of slave]
 Plan[8] = [master : change state from Serving to Auth]
 Plan[9] = [master : change state from Auth to Dump]
 Plan[10] = [slave : invoke method dump of master]
 Plan[11] = [slave : change state from Inst to ReceiveDump]
 Plan[12] = [slave : change state from ReceiveDump to Serving]
 Plan[13] = [master : change state from Dump to MasterServing]
Vertex popped: application (Uninst,Inst)
STACK = 
[]
It's an intermediate vertex => add action [application : change state from Uninst to Inst] to the plan.
Deal with go/blue edges
Deal with return/red edges
Deal with successor vertex.
INST Edge: PUSH vertex: application (Inst,D)
STACK = 
application (Inst,D) | 
Target has been REACHED.
Vertex removed: application (Uninst,Inst)

The computed PLAN is: 
 Plan[1] = [Create instance application:Application]
 Plan[2] = [Create instance slave:Slave]
 Plan[3] = [Create instance master:Master]
 Plan[4] = [master : change state from Uninst to Inst]
 Plan[5] = [master : change state from Inst to Serving]
 Plan[6] = [slave : change state from Uninst to Inst]
 Plan[7] = [master : invoke method slave_ip of slave]
 Plan[8] = [master : change state from Serving to Auth]
 Plan[9] = [master : change state from Auth to Dump]
 Plan[10] = [slave : invoke method dump of master]
 Plan[11] = [slave : change state from Inst to ReceiveDump]
 Plan[12] = [slave : change state from ReceiveDump to Serving]
 Plan[13] = [master : change state from Dump to MasterServing]
 Plan[14] = [application : invoke method mysql of master]
 Plan[15] = [application : invoke method s_mysql of slave]
 Plan[16] = [application : change state from Uninst to Inst]
